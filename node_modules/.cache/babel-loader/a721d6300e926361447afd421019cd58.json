{"ast":null,"code":"import Tree from \"../DataStructures/Tree\";\nimport Node from \"../DataStructures/Node\";\nimport make_attribute from \"./make_attribute\"; //Insertar productos\n\nfunction insert_products() {\n  for (let i = 0; i <= 1000; i++) {\n    let product = make_attribute();\n\n    if (product.productName === \"Sushi\" || product.productName === \"Pez globo\") {\n      product_tree.insert(fish, product);\n    } else if (product.productName === \"Dorayaki\" || product.productName === \"Nieve mango\" || product.productName === \"Takoyakis\" || product.productName === \"Tofu frito\") {\n      product_tree.insert(desserts, product);\n    } else if (product.productName === \"Cerdo dulce\" || product.productName === \"Satay\" || product.productName === \"Ddeokbokki\" || product.productName === \"Yakitori\" || product.productName === \"Peking duck\" || product.productName === \"Teokbokki\" || product.productName === \"Japchae\" || product.productName === \"Okonomiyaki\") {\n      product_tree.insert(courses, product);\n    } else if (product.productName === \"Curry\" || product.productName === \"Yakisoba\" || product.productName === \"Ramen\" || product.productName === \"Soba fideos\" || product.productName === \"Laksa\") {\n      product_tree.insert(soups, product);\n    } else if (product.productName === \"Genmaicha\") {\n      product_tree.insert(drinks, product);\n    }\n  }\n}\n\nlet product_tree = new Tree();\nlet root = new Node({\n  name: \"Categories\"\n});\nproduct_tree.root = root;\nlet desserts = [];\nproduct_tree.insert(root, desserts);\nlet fish = [];\nproduct_tree.insert(root, fish);\nlet courses = [];\nproduct_tree.insert(root, courses);\nlet soups = [];\nproduct_tree.insert(root, soups);\nlet drinks = [];\nproduct_tree.insert(root, drinks); //Insertion time\n\nlet start = new Date();\nlet simulateTime = 1000;\ninsert_products();\nsetTimeout(function (argument) {\n  let end = new Date() - start;\n  console.info('Execution time (Insertion on Tree): %dms', end);\n}, simulateTime); //Search time\n\nlet start1 = new Date();\nlet simulateTime1 = 1000;\nproduct_tree.find('Curry');\nsetTimeout(function (argument) {\n  let end = new Date() - start1;\n  console.info('Execution time (Search on Tree): %dms', end);\n}, simulateTime1); //Deletion time\n\nlet start2 = new Date();\nlet simulateTime2 = 1000;\n\nfor (let j = 0; j < 2500; j++) {\n  product_tree.remove(courses, product_tree.find(\"Curry\"));\n}\n\nsetTimeout(function (argument) {\n  let end = new Date() - start2;\n  console.info('Execution time (Delete on Tree): %dms', end);\n}, simulateTime2);\nexport default product_tree;","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/components/ProgramDrivers/ProductTreeDriver.js"],"names":["Tree","Node","make_attribute","insert_products","i","product","productName","product_tree","insert","fish","desserts","courses","soups","drinks","root","name","start","Date","simulateTime","setTimeout","argument","end","console","info","start1","simulateTime1","find","start2","simulateTime2","j","remove"],"mappings":"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","sourcesContent":["import Tree from \"../DataStructures/Tree\";\nimport Node from \"../DataStructures/Node\";\nimport make_attribute from \"./make_attribute\";\n\n//Insertar productos\n\nfunction insert_products(){\n    for (let i=0; i<=1000; i++){\n\n        let product = make_attribute();\n        if (product.productName === \"Sushi\" ||\n            product.productName === \"Pez globo\"\n        ){\n            product_tree.insert(fish,product);\n        } else if (\n            product.productName === \"Dorayaki\" ||\n            product.productName === \"Nieve mango\" ||\n            product.productName === \"Takoyakis\" ||\n            product.productName === \"Tofu frito\"\n        ){\n            product_tree.insert(desserts,product);\n        } else if (\n            product.productName === \"Cerdo dulce\" ||\n            product.productName === \"Satay\" ||\n            product.productName === \"Ddeokbokki\" ||\n            product.productName === \"Yakitori\" ||\n            product.productName === \"Peking duck\" ||\n            product.productName === \"Teokbokki\" ||\n            product.productName === \"Japchae\" ||\n            product.productName === \"Okonomiyaki\"\n        ){\n            product_tree.insert(courses, product);\n        } else if (\n            product.productName === \"Curry\" ||\n            product.productName === \"Yakisoba\" ||\n            product.productName === \"Ramen\" ||\n            product.productName === \"Soba fideos\" ||\n            product.productName === \"Laksa\"\n        ){\n            product_tree.insert(soups, product);\n        }else if (\n            product.productName === \"Genmaicha\"\n        ){\n            product_tree.insert(drinks, product);\n        }\n    }\n}\n\n\nlet product_tree = new Tree();\n\nlet root = new Node({\n    name: \"Categories\"\n});\n\nproduct_tree.root = root;\n\nlet desserts = [];\nproduct_tree.insert(root,desserts);\n\nlet fish = [];\nproduct_tree.insert(root,fish);\n\nlet courses = [];\nproduct_tree.insert(root,courses);\n\nlet soups = [];\nproduct_tree.insert(root,soups);\n\nlet drinks = [];\nproduct_tree.insert(root,drinks);\n\n\n\n//Insertion time\nlet start = new Date()\nlet simulateTime = 1000\n\ninsert_products();\n\n\nsetTimeout(function(argument) {\n    let end = new Date() - start\n    console.info('Execution time (Insertion on Tree): %dms', end)\n}, simulateTime)\n\n\n//Search time\nlet start1 = new Date()\nlet simulateTime1 = 1000\n\n\nproduct_tree.find('Curry');\n\nsetTimeout(function(argument) {\n    let end = new Date() - start1\n    console.info('Execution time (Search on Tree): %dms', end)\n}, simulateTime1)\n\n\n//Deletion time\nlet start2 = new Date()\nlet simulateTime2 = 1000\n\nfor (let j=0; j<2500; j++){\n    product_tree.remove(courses, product_tree.find(\"Curry\"));\n}\n\nsetTimeout(function(argument) {\n    let end = new Date() - start2\n    console.info('Execution time (Delete on Tree): %dms', end)\n}, simulateTime2)\n\n\nexport default product_tree;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Clase GenericArrayList: Implementaci칩n de listas con arreglos. No es necesario\n// implementar Interfaces o Generic Classes como en Java. (Duck Typing)\nclass GenericArrayList {\n  constructor(size) {\n    this.size = size;\n    this.count = 0;\n    this.position = 0;\n    this.array = new Array(this.size);\n  }\n\n  empty() {\n    return this.count <= 0;\n  }\n\n  full() {\n    return this.count >= this.size;\n  }\n\n  insert(item) {\n    let inserted = true;\n\n    if (!this.full()) {\n      if (!this.search(item)) {\n        for (let j = this.count; j > this.position; j--) {\n          this.array[j] = this.array[j - 1];\n        }\n\n        this.array[this.position] = item;\n        this.count++;\n        return inserted;\n      } else {\n        console.log(\"List is Full\");\n        return !inserted;\n      }\n    }\n  }\n\n  delete(item) {\n    let deleted = true;\n\n    if (!this.empty()) {\n      if (this.search(item)) {\n        for (let j = this.position; j < this.count - 1; j++) {\n          this.array[j] = this.array[j + 1];\n        }\n\n        this.count--;\n        return deleted;\n      } else {\n        console.log(\"List is Empty\");\n        return !deleted;\n      }\n    }\n  }\n\n  search(item) {\n    let found = false;\n    let stop = false;\n    this.position = 0;\n\n    while (this.position < this.count && !stop) if (this.array[this.position].productName.localeCompare(item.productName) <= 0) {\n      stop = true;\n\n      if (this.array[this.position].productName === item.productName) {\n        found = true;\n      }\n    } else {\n      this.position++;\n      return found;\n    }\n  } //Solo est치 imprimiendo el precio de los productos, por conveniencia para probar\n\n\n  output() {\n    console.log('List: ');\n    let j = 0;\n\n    while (j !== this.count) {\n      console.log(\"Product \" + j + \" : \");\n      console.log(this.array[j].productName + \", \" + this.array[j].productPrice + \", \" + this.array[j].productCode);\n      j++;\n    }\n\n    console.log(\"Array of:\" + this.array.length);\n  }\n\n}\n\nexport default GenericArrayList;","map":{"version":3,"sources":["/root/Escritorio/Donburi-React_Template/src/components/GenericArrayList.js"],"names":["GenericArrayList","constructor","size","count","position","array","Array","empty","full","insert","item","inserted","search","j","console","log","delete","deleted","found","stop","productName","localeCompare","output","productPrice","productCode","length"],"mappings":"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","sourcesContent":["// Clase GenericArrayList: Implementaci칩n de listas con arreglos. No es necesario\n// implementar Interfaces o Generic Classes como en Java. (Duck Typing)\n\nclass GenericArrayList{\n\n    constructor(size){\n        this.size = size;\n        this.count = 0;\n        this.position = 0;\n        this.array = new Array(this.size);\n    }\n\n    empty() {\n        return this.count<=0;\n    }\n\n    full() {\n        return this.count >= this.size;\n    }\n\n    insert(item) {\n        let inserted = true;\n        if(!this.full()) {\n            if (!this.search(item)) {\n                for (let j = this.count; j > this.position; j--) {\n                    this.array[j] = this.array[j-1];\n                }\n                this.array[this.position] = item;\n                this.count++;\n                return inserted;\n            } else {\n                console.log(\"List is Full\");\n                return !inserted;\n            }\n        }\n    }\n\n    delete(item) {\n        let deleted = true;\n        if(!this.empty()) {\n            if (this.search(item)) {\n                for (let j = this.position; j < this.count - 1; j++) {\n                    this.array[j] = this.array[j+1];\n                }\n                this.count--;\n                return deleted;\n            } else {\n                console.log(\"List is Empty\");\n                return !deleted;\n            }\n        }\n    }\n\n    search(item) {\n        let found = false;\n        let stop = false;\n        this.position = 0;\n        while(this.position < this.count && !stop)\n            if(((this.array[this.position].productName).localeCompare(item.productName)) <= 0) {\n                stop = true;\n                if((this.array[this.position].productName) === item.productName){\n                    found = true;\n                }\n            }else{\n                this.position++;\n                return found;\n            }\n    }\n\n    //Solo est치 imprimiendo el precio de los productos, por conveniencia para probar\n    output() {\n        console.log('List: ');\n        let j = 0;\n        while(j !== this.count) {\n            console.log(\"Product \" + j + \" : \")\n            console.log(this.array[j].productName + \", \" + this.array[j].productPrice +\n                \", \" + this.array[j].productCode);\n            j++;\n        }\n        console.log(\"Array of:\" + this.array.length);\n    }\n\n}\n\nexport default GenericArrayList;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/sebastian/Downloads/Donburi-master/src/Context.js\";\n\n/* Context.js: Maneja la actualización de los Detalles de los producto, así como la actualización de los precios y totales del carrito de compras.\n*/\nimport React, { Component } from \"react\";\nimport product_array_list from \"./components/ProgramDrivers/ProductArrayListDriver\";\nimport product_linked_list from \"./components/ProgramDrivers/ProductLinkedListDriver\";\nimport PriorityQueue from \"./components/DataStructures/PriorityQueue\";\nimport Queue from \"./components/DataStructures/Queue\";\nimport product_tree from \"./components/ProgramDrivers/ProductTreeDriver\";\nimport { string } from \"prop-types\";\nconst productDetails = {\n  productName: \"Sushi\",\n  productCode: \"Ab0303\",\n  productPrice: 21000,\n  img: \"://0\",\n  inCart: false,\n  details: \"Utamur hendrerit cu est. Nihil torquatos qui ut. Mollis malorum perfecto vix ne. \" + \"Quo id tritani discere dolores, noster eirmod ancillae an sea, ut cum debet delenit accusamus. \" + \"Duo ex oporteat imperdiet urbanitas.\"\n};\nconst ProductContext = React.createContext(); //ProductProvider: Contiene el estado (state) de los datos del programa, asi como las funciones de actualización.\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      searchResults: [],\n      productsLinked: product_linked_list,\n      productsTree: product_tree,\n      productDetails: productDetails,\n      shoppingCartQueue: new Queue(),\n      shoppingCart: new PriorityQueue(),\n      productPreviewOpen: false,\n      productPreviewModel: productDetails,\n      cartSubTotal: 0,\n      cartTax: 0,\n      cartTotal: 0,\n      searchString: ''\n    };\n\n    this.setProducts = () => {\n      let products = [];\n      product_array_list.array.forEach(item => {\n        const singleItem = { ...item\n        };\n        products = [...products, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: products\n        };\n      });\n    };\n\n    this.getItem = productName => {\n      const product = this.state.products.find(item => item.productName === productName);\n      return product;\n    };\n\n    this.handleDetail = productName => {\n      const product = this.getItem(productName);\n      this.setState(() => {\n        return {\n          productDetails: product\n        };\n      });\n    };\n\n    this.addToCart = productName => {\n      let auxProducts = [...this.state.products];\n      const index = auxProducts.indexOf(this.getItem(productName));\n      const product = auxProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      const price = product.productPrice;\n      product.total = price;\n      this.state.shoppingCart.insert(product);\n      /*this.state.shoppingCartQueue.enqueue(product);*/\n\n      this.setState(() => {\n        return {\n          products: auxProducts,\n          shoppingCar: this.state.shoppingCart\n          /* shopṕíngCartQueue: this.state.shoppingCartQueue*/\n\n        };\n      }, () => {\n        this.calculateTotal();\n      });\n    };\n\n    this.setSearch = e => {\n      let search = e.currentTarget.value; //console.log(e.currentTarget.value);\n\n      this.setState(() => {\n        return {\n          searchString: search\n        };\n      });\n    };\n\n    this.clearSearch = () => {\n      this.setState(() => {\n        return {\n          searchString: '',\n          searchResults: []\n        };\n      });\n    };\n\n    this.search = () => {\n      console.log(this.state.searchString);\n\n      if (this.state.searchString === '') {\n        this.setState(() => {\n          return {\n            searchResults: []\n          };\n        });\n      }\n\n      let aux = [...this.state.products];\n      let results = aux.filter(product => {\n        return product.productName.toLowerCase().indexOf(this.getSearch()) !== -1;\n      });\n      this.setState(() => {\n        return {\n          searchResults: results\n        };\n      });\n    };\n\n    this.openProductPreview = productName => {\n      const product = this.getItem(productName);\n      this.setState(() => {\n        return {\n          productPreviewModel: product,\n          productPreviewOpen: true\n        };\n      });\n    };\n\n    this.closeProductPreview = () => {\n      this.setState(() => {\n        return {\n          productPreviewOpen: false\n        };\n      });\n    };\n\n    this.addQuantity = productName => {\n      let tempCart = this.state.shoppingCart; // let tempCart1 = this.state.shoppingCartQueue;\n\n      const selectedProduct = tempCart.heap.find(item => item[0].productName === productName); // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n      const index = tempCart.heap.indexOf(selectedProduct);\n      const product = tempCart.heap[index]; // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n      // const product1 = tempCart1.heap[index1];\n\n      product[0].count++;\n      product[0].total = product[0].count * product[0].productPrice; // product1.count++;\n      // product1.total = product1.count * product1.productPrice;\n\n      this.setState(() => {\n        return {\n          shoppingCart: tempCart\n          /*shoppingCartQueue: tempCart1*/\n\n        };\n      }, () => {\n        this.calculateTotal();\n      });\n    };\n\n    this.decreaseQuantity = productName => {\n      let tempCart = this.state.shoppingCart; // let tempCart1 = this.state.shoppingCartQueue;\n\n      const selectedProduct = tempCart.heap.find(item => item[0].productName === productName); // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n      const index = tempCart.heap.indexOf(selectedProduct);\n      const product = tempCart.heap[index]; // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n      // const product1 = tempCart1.heap[index1];\n\n      if (product[0].count === 0) {\n        product[0].count = 0;\n      } else {\n        product[0].count = product[0].count - 1;\n        product[0].total = product[0].count * product[0].productPrice;\n        this.setState(() => {\n          return {\n            shoppingCart: tempCart\n          };\n        }, () => {\n          this.calculateTotal();\n        });\n      } // if (product1.count === 0){\n      //     product1.count = 0;\n      // } else {\n      //     product1.count = product1.count - 1;\n      //     product1.total = product1.count * product1.productPrice;\n      //     this.setState(() => {\n      //         return{shoppingCartQueue: tempCart1};\n      //     }, () => {\n      //         this.calculateTotal();\n      //     });\n      // }\n\n    };\n\n    this.removeItem = productName => {\n      let auxProducts = [...this.state.products];\n      let tempCart = this.state.shoppingCart;\n      tempCart = tempCart.heap.filter(item => item[0].productName !== productName);\n      const index = auxProducts.indexOf(this.getItem(productName));\n      let removed = auxProducts[index];\n      removed.inCart = false;\n      removed.total = 0;\n      removed.count = 0;\n      let newCart = new PriorityQueue();\n      newCart.heap = tempCart;\n      this.setState(() => {\n        return {\n          shoppingCart: newCart,\n          products: [...auxProducts]\n        };\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          shoppingCart: new PriorityQueue()\n        };\n      }, () => {\n        this.setProducts();\n        this.calculateTotal();\n      });\n    };\n\n    this.calculateTotal = () => {\n      let subTotal = 0;\n      this.state.shoppingCart.heap.map(item => subTotal += item[0].total);\n      const tempTax = subTotal * 0.19;\n      const tax = parseFloat(tempTax.toFixed(2));\n      const total = subTotal + tax;\n      this.setState(() => {\n        return {\n          cartSubTotal: subTotal,\n          cartTax: tax,\n          cartTotal: total\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setProducts();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        addToCart: this.addToCart,\n        handleDetail: this.handleDetail,\n        search: this.search,\n        setSearch: this.setSearch,\n        clearSearch: this.clearSearch,\n        openProductPreview: this.openProductPreview,\n        closeProductPreview: this.closeProductPreview,\n        addQuantity: this.addQuantity,\n        decreaseQuantity: this.decreaseQuantity,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/Context.js"],"names":["React","Component","product_array_list","product_linked_list","PriorityQueue","Queue","product_tree","string","productDetails","productName","productCode","productPrice","img","inCart","details","ProductContext","createContext","ProductProvider","state","products","searchResults","productsLinked","productsTree","shoppingCartQueue","shoppingCart","productPreviewOpen","productPreviewModel","cartSubTotal","cartTax","cartTotal","searchString","setProducts","array","forEach","item","singleItem","setState","getItem","product","find","handleDetail","addToCart","auxProducts","index","indexOf","count","price","total","insert","shoppingCar","calculateTotal","setSearch","e","search","currentTarget","value","clearSearch","console","log","aux","results","filter","toLowerCase","getSearch","openProductPreview","closeProductPreview","addQuantity","tempCart","selectedProduct","heap","decreaseQuantity","removeItem","removed","newCart","clearCart","subTotal","map","tempTax","tax","parseFloat","toFixed","componentDidMount","render","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["/* Context.js: Maneja la actualización de los Detalles de los producto, así como la actualización de los precios y totales del carrito de compras.\n*/\n\nimport React, {Component} from \"react\";\nimport product_array_list from \"./components/ProgramDrivers/ProductArrayListDriver\";\nimport product_linked_list from \"./components/ProgramDrivers/ProductLinkedListDriver\";\nimport PriorityQueue from \"./components/DataStructures/PriorityQueue\";\nimport Queue from \"./components/DataStructures/Queue\";\nimport product_tree from \"./components/ProgramDrivers/ProductTreeDriver\";\nimport {string} from \"prop-types\";\n\nconst productDetails = {\n    productName: \"Sushi\",\n    productCode: \"Ab0303\",\n    productPrice: 21000,\n    img: \"://0\",\n    inCart: false,\n    details: \"Utamur hendrerit cu est. Nihil torquatos qui ut. Mollis malorum perfecto vix ne. \" +\n        \"Quo id tritani discere dolores, noster eirmod ancillae an sea, ut cum debet delenit accusamus. \" +\n        \"Duo ex oporteat imperdiet urbanitas.\"\n}\n\nconst ProductContext = React.createContext();\n\n//ProductProvider: Contiene el estado (state) de los datos del programa, asi como las funciones de actualización.\nclass ProductProvider extends Component{\n    state = {\n        products: [],\n        searchResults: [],\n        productsLinked: product_linked_list,\n        productsTree: product_tree,\n        productDetails: productDetails,\n        shoppingCartQueue: new Queue(),\n        shoppingCart: new PriorityQueue(),\n        productPreviewOpen: false,\n        productPreviewModel: productDetails,\n        cartSubTotal: 0,\n        cartTax: 0,\n        cartTotal: 0,\n        searchString:''\n    };\n\n    componentDidMount() {\n        this.setProducts();\n    };\n    //getItem: Realiza una copia del ArrayList en state.products, la cual permite que no se modifiquen los datos en el ArrayList original de productos.\n    setProducts = () => {\n        let products = [];\n        product_array_list.array.forEach(item => {\n            const singleItem = {...item};\n            products = [...products, singleItem];\n        })\n\n        this.setState(()=>{\n            return {products:products};\n        });\n    };\n\n    //getItem: Busca un producto en específico en la lista state.products, la cual permite que no se modifiquen los datos en el ArrayList original de productos.\n    getItem = productName => {\n        const product = this.state.products.find(item => item.productName === productName);\n        return product;\n    };\n\n    //handleDetail: Gestiona los detalles de un producto dado.\n    handleDetail = productName => {\n        const product = this.getItem(productName);\n        this.setState(() => {\n            return {productDetails:product};\n        });\n    };\n\n    //addToCar: Añade un producto al carrito de compras.\n    addToCart = productName => {\n        let auxProducts = [...this.state.products];\n        const index = auxProducts.indexOf(this.getItem(productName));\n        const product = auxProducts[index];\n\n        product.inCart = true;\n        product.count = 1;\n        const price = product.productPrice;\n        product.total = price;\n\n        this.state.shoppingCart.insert(product);\n        /*this.state.shoppingCartQueue.enqueue(product);*/\n\n        this.setState(() => {\n            return {products: auxProducts, shoppingCar: this.state.shoppingCart/* shopṕíngCartQueue: this.state.shoppingCartQueue*/};\n        },() => {\n            this.calculateTotal();\n        });\n    };\n\n    setSearch = e => {\n        let search = e.currentTarget.value;\n        //console.log(e.currentTarget.value);\n        this.setState(() => {\n            return {searchString: search};\n        });\n    }\n\n    clearSearch = () =>{\n        this.setState(() => {\n            return {searchString: '', searchResults: []};\n        });\n    }\n\n    //search: Filtra la lista de productos y devuelve el resultado\n    search = () => {\n        console.log(this.state.searchString);\n\n        if(this.state.searchString === ''){\n            this.setState(() => {\n                return {searchResults: []};\n            });\n        }\n        let aux = [...this.state.products];\n        let results = aux.filter(product => {\n            return product.productName.toLowerCase().indexOf(this.getSearch()) !== -1;\n        })\n        this.setState(() => {\n            return {searchResults: results};\n        });\n    }\n\n    //openProductPreview: Cambia el valor de verdad de productPreviewOpen, la cual activa la vista de detalles del producto recién añadido al carrito.\n    openProductPreview = productName => {\n        const product = this.getItem(productName);\n        this.setState(() => {\n            return {productPreviewModel: product, productPreviewOpen: true};\n        });\n    };\n\n    //closeProductPreview: Cambia el valor de verdad de productPreviewOpen, la cual desactiva la vista de detalles del producto recién añadido al carrito.\n    closeProductPreview = () => {\n        this.setState(() => {\n            return {productPreviewOpen: false};\n        });\n    };\n\n    //addQuantity: Aumenta la cantidad de un mismo producto dentro del carrito de compras.\n    addQuantity = productName => {\n        let tempCart = this.state.shoppingCart;\n        // let tempCart1 = this.state.shoppingCartQueue;\n\n        const selectedProduct = tempCart.heap.find(item => item[0].productName === productName);\n        // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n        const index = tempCart.heap.indexOf(selectedProduct);\n        const product = tempCart.heap[index];\n        // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n        // const product1 = tempCart1.heap[index1];\n\n        product[0].count++;\n        product[0].total = product[0].count * product[0].productPrice;\n        // product1.count++;\n        // product1.total = product1.count * product1.productPrice;\n\n        this.setState(() => {\n            return{shoppingCart: tempCart, /*shoppingCartQueue: tempCart1*/};\n        }, () => {\n            this.calculateTotal();\n        });\n    };\n\n    //decreaseQuantity: Disminuye la cantidad de un mismo producto dentro del carrito de compras.\n    decreaseQuantity = productName => {\n        let tempCart = this.state.shoppingCart;\n        // let tempCart1 = this.state.shoppingCartQueue;\n\n        const selectedProduct = tempCart.heap.find(item => item[0].productName === productName);\n        // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n        const index = tempCart.heap.indexOf(selectedProduct);\n        const product = tempCart.heap[index];\n        // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n        // const product1 = tempCart1.heap[index1];\n\n        if (product[0].count === 0){\n            product[0].count = 0;\n        } else {\n            product[0].count = product[0].count - 1;\n            product[0].total = product[0].count * product[0].productPrice;\n            this.setState(() => {\n                return{shoppingCart: tempCart};\n            }, () => {\n                this.calculateTotal();\n            });\n        }\n\n        // if (product1.count === 0){\n        //     product1.count = 0;\n        // } else {\n        //     product1.count = product1.count - 1;\n        //     product1.total = product1.count * product1.productPrice;\n        //     this.setState(() => {\n        //         return{shoppingCartQueue: tempCart1};\n        //     }, () => {\n        //         this.calculateTotal();\n        //     });\n        // }\n    };\n\n    //removeItem: Remueve un producto en específico del carrito.\n    removeItem = productName => {\n        let auxProducts = [...this.state.products];\n        let tempCart = this.state.shoppingCart;\n        tempCart = tempCart.heap.filter(item => item[0].productName !== productName);\n\n        const index = auxProducts.indexOf(this.getItem(productName));\n        let removed = auxProducts[index];\n        removed.inCart = false;\n        removed.total = 0;\n        removed.count = 0;\n\n        let newCart = new PriorityQueue();\n        newCart.heap = tempCart;\n\n\n        this.setState(() => {\n            return {shoppingCart: newCart, products: [...auxProducts]}\n        });\n\n    };\n\n    //clearCart: Limpia por completo el carrito.\n    clearCart = () => {\n        this.setState(\n            () => {\n                return {shoppingCart: new PriorityQueue()};\n            },\n            () => {\n                this.setProducts();\n                this.calculateTotal();\n            }\n        );\n    };\n\n    //calculateTotal: calcula el subtotal, los impuestos y el total de los productos añadidos al carrito.\n    calculateTotal = () => {\n        let subTotal = 0;\n        this.state.shoppingCart.heap.map(item => (subTotal += item[0].total));\n        const tempTax = subTotal * 0.19;\n        const tax = parseFloat(tempTax.toFixed(2));\n        const total = subTotal + tax;\n        this.setState(() => {\n            return{cartSubTotal: subTotal, cartTax: tax, cartTotal: total};\n        });\n    };\n\n    render() {\n        return(\n            <ProductContext.Provider value={{\n                ...this.state,\n                addToCart: this.addToCart,\n                handleDetail: this.handleDetail,\n                search: this.search,\n                setSearch: this.setSearch,\n                clearSearch: this.clearSearch,\n                openProductPreview: this.openProductPreview,\n                closeProductPreview: this.closeProductPreview,\n                addQuantity: this.addQuantity,\n                decreaseQuantity: this.decreaseQuantity,\n                removeItem: this.removeItem,\n                clearCart: this.clearCart\n            }}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }\n}\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport {ProductProvider, ProductConsumer};"]},"metadata":{},"sourceType":"module"}
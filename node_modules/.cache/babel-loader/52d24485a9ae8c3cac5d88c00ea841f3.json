{"ast":null,"code":"var _jsxFileName = \"/home/sebastian/Documents/Donburi-Donburi_Final_Delivery/src/Context.js\";\n\n/* Context.js: Maneja la actualización de los Detalles de los producto, así como la actualización de los precios y totales del carrito de compras.\n*/\nimport React, { Component } from \"react\";\nimport product_array_list from \"./components/ProgramDrivers/ProductArrayListDriver\";\nimport product_linked_list from \"./components/ProgramDrivers/ProductLinkedListDriver\";\nimport PriorityQueue from \"./components/DataStructures/PriorityQueue\";\nimport Queue from \"./components/DataStructures/Queue\";\nimport HashTable from \"./components/DataStructures/HashTable\";\nimport product_tree from \"./components/ProgramDrivers/ProductTreeDriver\";\nimport users1 from \"./data/users\";\nconst productDetails = {\n  productName: \"Sushi\",\n  productCode: \"Ab0303\",\n  productPrice: 21000,\n  img: \"://0\",\n  inCart: false,\n  details: \"Utamur hendrerit cu est. Nihil torquatos qui ut. Mollis malorum perfecto vix ne. \" + \"Quo id tritani discere dolores, noster eirmod ancillae an sea, ut cum debet delenit accusamus. \" + \"Duo ex oporteat imperdiet urbanitas.\"\n};\nlet users = new HashTable(97);\n\nfor (let j = 0; j < users1.length; j++) {\n  users.insert(users1[j].firstName, users1[j]);\n}\n\nconst user = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\"\n};\nconst ProductContext = React.createContext(); //ProductProvider: Contiene el estado (state) de los datos del programa, asi como las funciones de actualización.\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: user,\n      users: users,\n      products: [],\n      searchResults: [],\n      productsLinked: product_linked_list,\n      productsTree: product_tree,\n      productDetails: productDetails,\n      shoppingCartQueue: new Queue(),\n      shoppingCart: new PriorityQueue(),\n      productPreviewOpen: false,\n      productPreviewModel: productDetails,\n      cartSubTotal: 0,\n      cartTax: 0,\n      cartTotal: 0,\n      searchString: ''\n    };\n\n    this.getUser = () => {\n      return this.state.user;\n    };\n\n    this.setFirstName = e => {\n      let newUser = this.getUser();\n      newUser.firstName = e.currentTarget.value;\n      this.setState(() => {\n        return {\n          user: newUser\n        };\n      });\n    };\n\n    this.setLastName = e => {\n      let newUser = this.getUser();\n      newUser.lastName = e.currentTarget.value;\n      this.setState(() => {\n        return {\n          user: newUser\n        };\n      });\n    };\n\n    this.setEmail = e => {\n      let newUser = this.getUser();\n      newUser.email = e.currentTarget.value;\n      this.setState(() => {\n        return {\n          user: newUser\n        };\n      });\n    };\n\n    this.setPassword = e => {\n      let newUser = this.getUser();\n      newUser.password = e.currentTarget.value;\n      this.setState(() => {\n        return {\n          user: newUser\n        };\n      });\n    };\n\n    this.register = () => {\n      let newUser = this.getUser();\n      this.setState(() => {\n        return {\n          users: this.state.users.insert(newUser.firstName, newUser),\n          user: user\n        };\n      });\n      console.log(this.state.users.search(newUser.firstName));\n    };\n\n    this.setProducts = () => {\n      let products = [];\n      product_array_list.array.forEach(item => {\n        const singleItem = { ...item\n        };\n        products = [...products, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: products\n        };\n      });\n    };\n\n    this.getItem = productName => {\n      const product = this.state.products.find(item => item.productName === productName);\n      return product;\n    };\n\n    this.getSearch = () => {\n      const search = this.state.searchString;\n      return search;\n    };\n\n    this.handleDetail = productName => {\n      const product = this.getItem(productName);\n      this.setState(() => {\n        return {\n          productDetails: product\n        };\n      });\n    };\n\n    this.addToCart = productName => {\n      let auxProducts = [...this.state.products];\n      const index = auxProducts.indexOf(this.getItem(productName));\n      const product = auxProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      const price = product.productPrice;\n      product.total = price;\n      this.state.shoppingCart.insert(product);\n      /*this.state.shoppingCartQueue.enqueue(product);*/\n\n      this.setState(() => {\n        return {\n          products: auxProducts,\n          shoppingCar: this.state.shoppingCart\n          /* shopṕíngCartQueue: this.state.shoppingCartQueue*/\n\n        };\n      }, () => {\n        this.calculateTotal();\n      });\n    };\n\n    this.setSearch = e => {\n      let search = e.currentTarget.value;\n      console.log(e.currentTarget.value);\n      this.setState(() => {\n        return {\n          searchString: search\n        };\n      });\n    };\n\n    this.clearSearch = () => {\n      this.setState(() => {\n        return {\n          searchString: ''\n        };\n      });\n    };\n\n    this.search = () => {\n      console.log(this.state.searchString);\n      console.log(this.getSearch);\n\n      if (this.state.searchString === '') {\n        this.setState(() => {\n          return {\n            searchResults: []\n          };\n        });\n      }\n\n      let aux = [...this.state.products];\n      let results = aux.filter(product => {\n        return product.productName.toLowerCase().indexOf(this.getSearch()) !== -1;\n      });\n      this.setState(() => {\n        return {\n          searchResults: results\n        };\n      });\n    };\n\n    this.openProductPreview = productName => {\n      const product = this.getItem(productName);\n      this.setState(() => {\n        return {\n          productPreviewModel: product,\n          productPreviewOpen: true\n        };\n      });\n    };\n\n    this.closeProductPreview = () => {\n      this.setState(() => {\n        return {\n          productPreviewOpen: false\n        };\n      });\n    };\n\n    this.addQuantity = productName => {\n      let tempCart = this.state.shoppingCart; // let tempCart1 = this.state.shoppingCartQueue;\n\n      const selectedProduct = tempCart.heap.find(item => item[0].productName === productName); // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n      const index = tempCart.heap.indexOf(selectedProduct);\n      const product = tempCart.heap[index]; // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n      // const product1 = tempCart1.heap[index1];\n\n      product[0].count++;\n      product[0].total = product[0].count * product[0].productPrice; // product1.count++;\n      // product1.total = product1.count * product1.productPrice;\n\n      this.setState(() => {\n        return {\n          shoppingCart: tempCart\n          /*shoppingCartQueue: tempCart1*/\n\n        };\n      }, () => {\n        this.calculateTotal();\n      });\n    };\n\n    this.decreaseQuantity = productName => {\n      let tempCart = this.state.shoppingCart; // let tempCart1 = this.state.shoppingCartQueue;\n\n      const selectedProduct = tempCart.heap.find(item => item[0].productName === productName); // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n      const index = tempCart.heap.indexOf(selectedProduct);\n      const product = tempCart.heap[index]; // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n      // const product1 = tempCart1.heap[index1];\n\n      if (product[0].count === 0) {\n        product[0].count = 0;\n      } else {\n        product[0].count = product[0].count - 1;\n        product[0].total = product[0].count * product[0].productPrice;\n        this.setState(() => {\n          return {\n            shoppingCart: tempCart\n          };\n        }, () => {\n          this.calculateTotal();\n        });\n      } // if (product1.count === 0){\n      //     product1.count = 0;\n      // } else {\n      //     product1.count = product1.count - 1;\n      //     product1.total = product1.count * product1.productPrice;\n      //     this.setState(() => {\n      //         return{shoppingCartQueue: tempCart1};\n      //     }, () => {\n      //         this.calculateTotal();\n      //     });\n      // }\n\n    };\n\n    this.removeItem = productName => {\n      let auxProducts = [...this.state.products];\n      let tempCart = this.state.shoppingCart;\n      tempCart = tempCart.heap.filter(item => item[0].productName !== productName);\n      const index = auxProducts.indexOf(this.getItem(productName));\n      let removed = auxProducts[index];\n      removed.inCart = false;\n      removed.total = 0;\n      removed.count = 0;\n      let newCart = new PriorityQueue();\n      newCart.heap = tempCart;\n      this.setState(() => {\n        return {\n          shoppingCart: newCart,\n          products: [...auxProducts]\n        };\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          shoppingCart: new PriorityQueue()\n        };\n      }, () => {\n        this.setProducts();\n        this.calculateTotal();\n      });\n    };\n\n    this.calculateTotal = () => {\n      let subTotal = 0;\n      this.state.shoppingCart.heap.map(item => subTotal += item[0].total);\n      const tempTax = subTotal * 0.19;\n      const tax = parseFloat(tempTax.toFixed(2));\n      const total = subTotal + tax;\n      this.setState(() => {\n        return {\n          cartSubTotal: subTotal,\n          cartTax: tax,\n          cartTotal: total\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setProducts();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        setFirstName: this.setFirstName,\n        setLastName: this.setLastName,\n        setEmail: this.setEmail,\n        setPassword: this.setPassword,\n        register: this.register,\n        addToCart: this.addToCart,\n        handleDetail: this.handleDetail,\n        search: this.search,\n        getSearch: this.getSearch,\n        setSearch: this.setSearch,\n        clearSearch: this.clearSearch,\n        openProductPreview: this.openProductPreview,\n        closeProductPreview: this.closeProductPreview,\n        addQuantity: this.addQuantity,\n        decreaseQuantity: this.decreaseQuantity,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["/home/sebastian/Documents/Donburi-Donburi_Final_Delivery/src/Context.js"],"names":["React","Component","product_array_list","product_linked_list","PriorityQueue","Queue","HashTable","product_tree","users1","productDetails","productName","productCode","productPrice","img","inCart","details","users","j","length","insert","firstName","user","lastName","email","password","ProductContext","createContext","ProductProvider","state","products","searchResults","productsLinked","productsTree","shoppingCartQueue","shoppingCart","productPreviewOpen","productPreviewModel","cartSubTotal","cartTax","cartTotal","searchString","getUser","setFirstName","e","newUser","currentTarget","value","setState","setLastName","setEmail","setPassword","register","console","log","search","setProducts","array","forEach","item","singleItem","getItem","product","find","getSearch","handleDetail","addToCart","auxProducts","index","indexOf","count","price","total","shoppingCar","calculateTotal","setSearch","clearSearch","aux","results","filter","toLowerCase","openProductPreview","closeProductPreview","addQuantity","tempCart","selectedProduct","heap","decreaseQuantity","removeItem","removed","newCart","clearCart","subTotal","map","tempTax","tax","parseFloat","toFixed","componentDidMount","render","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["/* Context.js: Maneja la actualización de los Detalles de los producto, así como la actualización de los precios y totales del carrito de compras.\n*/\n\nimport React, {Component} from \"react\";\nimport product_array_list from \"./components/ProgramDrivers/ProductArrayListDriver\";\nimport product_linked_list from \"./components/ProgramDrivers/ProductLinkedListDriver\";\nimport PriorityQueue from \"./components/DataStructures/PriorityQueue\";\nimport Queue from \"./components/DataStructures/Queue\";\nimport HashTable from \"./components/DataStructures/HashTable\";\nimport product_tree from \"./components/ProgramDrivers/ProductTreeDriver\";\nimport users1 from \"./data/users\";\n\n\nconst productDetails = {\n    productName: \"Sushi\",\n    productCode: \"Ab0303\",\n    productPrice: 21000,\n    img: \"://0\",\n    inCart: false,\n    details: \"Utamur hendrerit cu est. Nihil torquatos qui ut. Mollis malorum perfecto vix ne. \" +\n        \"Quo id tritani discere dolores, noster eirmod ancillae an sea, ut cum debet delenit accusamus. \" +\n        \"Duo ex oporteat imperdiet urbanitas.\"\n}\n\nlet users = new HashTable(97);\nfor( let j=0; j<users1.length; j++){\n    users.insert(users1[j].firstName, users1[j]);\n}\n\nconst user = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\"\n}\n\nconst ProductContext = React.createContext();\n\n//ProductProvider: Contiene el estado (state) de los datos del programa, asi como las funciones de actualización.\nclass ProductProvider extends Component{\n    state = {\n        user: user,\n        users: users,\n        products: [],\n        searchResults: [],\n        productsLinked: product_linked_list,\n        productsTree: product_tree,\n        productDetails: productDetails,\n        shoppingCartQueue: new Queue(),\n        shoppingCart: new PriorityQueue(),\n        productPreviewOpen: false,\n        productPreviewModel: productDetails,\n        cartSubTotal: 0,\n        cartTax: 0,\n        cartTotal: 0,\n        searchString:''\n    };\n\n    componentDidMount() {\n        this.setProducts();\n    };\n\n    getUser = () => {\n        return this.state.user;\n    }\n\n    setFirstName = e => {\n        let newUser = this.getUser();\n        newUser.firstName = e.currentTarget.value;\n        this.setState(()=> {\n            return {user: newUser}\n        })\n    }\n\n    setLastName = e => {\n        let newUser = this.getUser();\n        newUser.lastName = e.currentTarget.value;\n        this.setState(()=> {\n            return {user: newUser}\n        })\n    }\n\n    setEmail = e => {\n        let newUser = this.getUser();\n        newUser.email = e.currentTarget.value;\n        this.setState(()=> {\n            return {user: newUser}\n        })\n    }\n\n    setPassword = e => {\n        let newUser = this.getUser();\n        newUser.password = e.currentTarget.value;\n        this.setState(()=> {\n            return {user: newUser}\n        })\n    }\n\n    register = () => {\n        let newUser = this.getUser();\n        this.setState( () => {\n            return {users: this.state.users.insert(newUser.firstName, newUser), user: user}\n        })\n        console.log(this.state.users.search(newUser.firstName));\n    }\n\n    //getItem: Realiza una copia del ArrayList en state.products, la cual permite que no se modifiquen los datos en el ArrayList original de productos.\n    setProducts = () => {\n        let products = [];\n        product_array_list.array.forEach(item => {\n            const singleItem = {...item};\n            products = [...products, singleItem];\n        })\n\n        this.setState(()=>{\n            return {products:products};\n        });\n    };\n\n    //getItem: Busca un producto en específico en la lista state.products, la cual permite que no se modifiquen los datos en el ArrayList original de productos.\n    getItem = productName => {\n        const product = this.state.products.find(item => item.productName === productName);\n        return product;\n    };\n\n    getSearch = () => {\n        const search = this.state.searchString;\n        return search;\n    }\n\n    //handleDetail: Gestiona los detalles de un producto dado.\n    handleDetail = productName => {\n        const product = this.getItem(productName);\n        this.setState(() => {\n            return {productDetails:product};\n        });\n    };\n\n    //addToCar: Añade un producto al carrito de compras.\n    addToCart = productName => {\n        let auxProducts = [...this.state.products];\n        const index = auxProducts.indexOf(this.getItem(productName));\n        const product = auxProducts[index];\n\n        product.inCart = true;\n        product.count = 1;\n        const price = product.productPrice;\n        product.total = price;\n\n        this.state.shoppingCart.insert(product);\n        /*this.state.shoppingCartQueue.enqueue(product);*/\n\n        this.setState(() => {\n            return {products: auxProducts, shoppingCar: this.state.shoppingCart/* shopṕíngCartQueue: this.state.shoppingCartQueue*/};\n        },() => {\n            this.calculateTotal();\n        });\n    };\n\n    setSearch = e => {\n        let search = e.currentTarget.value;\n        console.log(e.currentTarget.value);\n        this.setState(() => {\n            return {searchString: search};\n        });\n    }\n\n    clearSearch = () =>{\n        this.setState(() => {\n            return {searchString: ''};\n        });\n    }\n\n    //search: Filtra la lista de productos y devuelve el resultado\n    search = () => {\n        console.log(this.state.searchString);\n        console.log(this.getSearch);\n        if(this.state.searchString === ''){\n            this.setState(() => {\n                return {searchResults: []};\n            });\n        }\n        let aux = [...this.state.products];\n        let results = aux.filter(product => {\n            return product.productName.toLowerCase().indexOf(this.getSearch()) !== -1;\n        })\n        this.setState(() => {\n            return {searchResults: results};\n        });\n    }\n\n    //openProductPreview: Cambia el valor de verdad de productPreviewOpen, la cual activa la vista de detalles del producto recién añadido al carrito.\n    openProductPreview = productName => {\n        const product = this.getItem(productName);\n        this.setState(() => {\n            return {productPreviewModel: product, productPreviewOpen: true};\n        });\n    };\n\n    //closeProductPreview: Cambia el valor de verdad de productPreviewOpen, la cual desactiva la vista de detalles del producto recién añadido al carrito.\n    closeProductPreview = () => {\n        this.setState(() => {\n            return {productPreviewOpen: false};\n        });\n    };\n\n    //addQuantity: Aumenta la cantidad de un mismo producto dentro del carrito de compras.\n    addQuantity = productName => {\n        let tempCart = this.state.shoppingCart;\n        // let tempCart1 = this.state.shoppingCartQueue;\n\n        const selectedProduct = tempCart.heap.find(item => item[0].productName === productName);\n        // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n        const index = tempCart.heap.indexOf(selectedProduct);\n        const product = tempCart.heap[index];\n        // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n        // const product1 = tempCart1.heap[index1];\n\n        product[0].count++;\n        product[0].total = product[0].count * product[0].productPrice;\n        // product1.count++;\n        // product1.total = product1.count * product1.productPrice;\n\n        this.setState(() => {\n            return{shoppingCart: tempCart, /*shoppingCartQueue: tempCart1*/};\n        }, () => {\n            this.calculateTotal();\n        });\n    };\n\n    //decreaseQuantity: Disminuye la cantidad de un mismo producto dentro del carrito de compras.\n    decreaseQuantity = productName => {\n        let tempCart = this.state.shoppingCart;\n        // let tempCart1 = this.state.shoppingCartQueue;\n\n        const selectedProduct = tempCart.heap.find(item => item[0].productName === productName);\n        // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n        const index = tempCart.heap.indexOf(selectedProduct);\n        const product = tempCart.heap[index];\n        // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n        // const product1 = tempCart1.heap[index1];\n\n        if (product[0].count === 0){\n            product[0].count = 0;\n        } else {\n            product[0].count = product[0].count - 1;\n            product[0].total = product[0].count * product[0].productPrice;\n            this.setState(() => {\n                return{shoppingCart: tempCart};\n            }, () => {\n                this.calculateTotal();\n            });\n        }\n\n        // if (product1.count === 0){\n        //     product1.count = 0;\n        // } else {\n        //     product1.count = product1.count - 1;\n        //     product1.total = product1.count * product1.productPrice;\n        //     this.setState(() => {\n        //         return{shoppingCartQueue: tempCart1};\n        //     }, () => {\n        //         this.calculateTotal();\n        //     });\n        // }\n    };\n\n    //removeItem: Remueve un producto en específico del carrito.\n    removeItem = productName => {\n        let auxProducts = [...this.state.products];\n        let tempCart = this.state.shoppingCart;\n        tempCart = tempCart.heap.filter(item => item[0].productName !== productName);\n\n        const index = auxProducts.indexOf(this.getItem(productName));\n        let removed = auxProducts[index];\n        removed.inCart = false;\n        removed.total = 0;\n        removed.count = 0;\n\n        let newCart = new PriorityQueue();\n        newCart.heap = tempCart;\n\n\n        this.setState(() => {\n            return {shoppingCart: newCart, products: [...auxProducts]}\n        });\n\n    };\n\n    //clearCart: Limpia por completo el carrito.\n    clearCart = () => {\n        this.setState(\n            () => {\n                return {shoppingCart: new PriorityQueue()};\n            },\n            () => {\n                this.setProducts();\n                this.calculateTotal();\n            }\n        );\n    };\n\n    //calculateTotal: calcula el subtotal, los impuestos y el total de los productos añadidos al carrito.\n    calculateTotal = () => {\n        let subTotal = 0;\n        this.state.shoppingCart.heap.map(item => (subTotal += item[0].total));\n        const tempTax = subTotal * 0.19;\n        const tax = parseFloat(tempTax.toFixed(2));\n        const total = subTotal + tax;\n        this.setState(() => {\n            return{cartSubTotal: subTotal, cartTax: tax, cartTotal: total};\n        });\n    };\n\n    render() {\n        return(\n            <ProductContext.Provider value={{\n                ...this.state,\n                setFirstName: this.setFirstName,\n                setLastName: this.setLastName,\n                setEmail: this.setEmail,\n                setPassword:this.setPassword,\n                register: this.register,\n                addToCart: this.addToCart,\n                handleDetail: this.handleDetail,\n                search: this.search,\n                getSearch: this.getSearch,\n                setSearch: this.setSearch,\n                clearSearch: this.clearSearch,\n                openProductPreview: this.openProductPreview,\n                closeProductPreview: this.closeProductPreview,\n                addQuantity: this.addQuantity,\n                decreaseQuantity: this.decreaseQuantity,\n                removeItem: this.removeItem,\n                clearCart: this.clearCart\n            }}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }\n}\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport {ProductProvider, ProductConsumer};"]},"metadata":{},"sourceType":"module"}
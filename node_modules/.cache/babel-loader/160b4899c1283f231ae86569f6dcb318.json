{"ast":null,"code":"//Clase GenericArray: Implementada ya que los arreglos de JS son dinámicos por defecto\nclass GenericArray {\n  constructor(size) {\n    this.size = size;\n    this.data = {};\n  }\n\n  push(element) {\n    this.data[this.size] = element;\n    this.size++;\n    return this.data;\n  }\n\n  pop() {\n    delete this.data[this.size - 1];\n    this.size--;\n    return this.data;\n  }\n\n  insertAt(item, index) {\n    for (let i = this.size; i >= index; i--) {\n      this.data[i] = this.data[i - 1];\n    }\n\n    this.data[index] = item;\n    this.size++;\n    return this.data;\n  }\n\n  getElementAtIndex(index) {\n    return this.data[index];\n  }\n\n}\n\nexport default GenericArray;","map":{"version":3,"sources":["/home/sebastian/Documents/donburi_react_app/src/components/GenericArray.js"],"names":["GenericArray","constructor","size","data","push","element","pop","insertAt","item","index","i","getElementAtIndex"],"mappings":"AAAA;AAEA,MAAMA,YAAN,CAAmB;AACfC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAY,EAAZ;AACH;;AAEDC,EAAAA,IAAI,CAACC,OAAD,EAAU;AACV,SAAKF,IAAL,CAAU,KAAKD,IAAf,IAAuBG,OAAvB;AACA,SAAKH,IAAL;AACA,WAAO,KAAKC,IAAZ;AACH;;AAEDG,EAAAA,GAAG,GAAG;AACF,WAAO,KAAKH,IAAL,CAAU,KAAKD,IAAL,GAAU,CAApB,CAAP;AACA,SAAKA,IAAL;AACA,WAAO,KAAKC,IAAZ;AACH;;AAEDI,EAAAA,QAAQ,CAACC,IAAD,EAAOC,KAAP,EAAc;AAClB,SAAI,IAAIC,CAAC,GAAC,KAAKR,IAAf,EAAoBQ,CAAC,IAAED,KAAvB,EAA6BC,CAAC,EAA9B,EAAkC;AAC9B,WAAKP,IAAL,CAAUO,CAAV,IAAa,KAAKP,IAAL,CAAUO,CAAC,GAAC,CAAZ,CAAb;AACH;;AACD,SAAKP,IAAL,CAAUM,KAAV,IAAiBD,IAAjB;AACA,SAAKN,IAAL;AACA,WAAO,KAAKC,IAAZ;AACH;;AAEDQ,EAAAA,iBAAiB,CAACF,KAAD,EAAQ;AACrB,WAAO,KAAKN,IAAL,CAAUM,KAAV,CAAP;AACH;;AA7Bc;;AAgCnB,eAAeT,YAAf","sourcesContent":["//Clase GenericArray: Implementada ya que los arreglos de JS son dinámicos por defecto\n\nclass GenericArray {\n    constructor(size) {\n        this.size = size;\n        this.data = {};\n    }\n\n    push(element) {\n        this.data[this.size] = element;\n        this.size++;\n        return this.data;\n    }\n\n    pop() {\n        delete this.data[this.size-1];\n        this.size--;\n        return this.data;\n    }\n\n    insertAt(item, index) {\n        for(let i=this.size;i>=index;i--) {\n            this.data[i]=this.data[i-1];\n        }\n        this.data[index]=item;\n        this.size++;\n        return this.data;\n    }\n\n    getElementAtIndex(index) {\n        return this.data[index];\n    }\n}\n\nexport default GenericArray;"]},"metadata":{},"sourceType":"module"}
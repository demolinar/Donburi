{"ast":null,"code":"class Node {\n  constructor(value) {\n    this.data = value;\n    this.left = this.right = null;\n  }\n\n}\n\nclass BST {\n  constructor() {\n    this.root = null;\n  }\n\n  minValue(node) {\n    let current = node;\n\n    while (current && current.left != null) {\n      current = current.left;\n    }\n\n    return current;\n  }\n\n  maxValue(node) {\n    let current = node;\n\n    while (current && current.right != null) {\n      current = current.right;\n    }\n\n    return current;\n  }\n\n  delete(data) {\n    this.root = this.removeNode(this.root, data);\n  }\n\n  removeNode(node, key) {\n    if (node === null) return null;else if (key < node.data.productName) {\n      node.left = this.removeNode(node.left, key);\n      return node;\n    } else if (key > node.data.productName) {\n      node.right = this.removeNode(node.right, key);\n      return node;\n    } else {\n      if (node.left === null && node.right === null) {\n        node = null;\n        return node;\n      }\n\n      if (node.left === null) {\n        node = node.right;\n        return node;\n      } else if (node.right === null) {\n        node = node.left;\n        return node;\n      }\n\n      let aux = this.minValue(node.right);\n      node.data = aux.data;\n      node.right = this.removeNode(node.right, aux.data);\n      return node;\n    }\n  }\n\n  insert(data) {\n    let newNode = new Node(data);\n    if (this.root === null) this.root = newNode;else this.insertNode(this.root, newNode);\n  }\n\n  insertNode(node, newNode) {\n    if (newNode.data.productName < node.data.productName) {\n      if (node.left === null) node.left = newNode;else this.insertNode(node.left, newNode);\n    } else {\n      if (node.right === null) node.right = newNode;else this.insertNode(node.right, newNode);\n    }\n  }\n\n  inorder(root) {\n    if (!root) {\n      return;\n    }\n\n    this.inorder(root.left);\n    console.log(root.data);\n    this.inorder(root.right);\n  }\n\n  search(node, data) {\n    if (node === null) return null;else if (data < node.data.productName) return this.search(node.left, data);else if (data > node.data.productName) return this.search(node.right, data);else return node;\n  }\n\n  toArray(node) {\n    let result = [];\n\n    if (node.left != null) {\n      result.push(this.toArray(node.left));\n    }\n\n    if (node.right != null) {\n      result.push(this.toArray(node.right));\n    }\n\n    result.push(node.data);\n    return result;\n  }\n\n}\n\nexport default BST;","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/components/DataStructures/BST.js"],"names":["Node","constructor","value","data","left","right","BST","root","minValue","node","current","maxValue","delete","removeNode","key","productName","aux","insert","newNode","insertNode","inorder","console","log","search","toArray","result","push"],"mappings":"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","sourcesContent":["class Node{\n\n    constructor(value) {\n        this.data = value;\n        this.left = this.right = null;\n    }\n\n}\n\nclass BST {\n\n    constructor() {\n        this.root = null;\n    }\n\n    minValue(node) {\n        let current = node;\n        while (current && current.left != null){\n            current = current.left;\n        }\n        return current;\n    }\n\n    maxValue(node) {\n        let current = node;\n        while (current && current.right != null){\n            current = current.right;\n        }\n        return current;\n    }\n\n    delete(data) {\n        this.root = this.removeNode(this.root, data);\n    }\n\n    removeNode(node, key) {\n\n        if(node === null)\n            return null;\n        else if(key < node.data.productName) {\n            node.left = this.removeNode(node.left, key);\n            return node;\n        } else if(key > node.data.productName) {\n            node.right = this.removeNode(node.right, key);\n            return node;\n        } else {\n            if(node.left === null && node.right === null) {\n                node = null;\n                return node;\n            }\n\n            if(node.left === null) {\n                node = node.right;\n                return node;\n            } else if(node.right === null) {\n                node = node.left;\n                return node;\n            }\n\n            let aux = this.minValue(node.right);\n            node.data = aux.data;\n\n            node.right = this.removeNode(node.right, aux.data);\n            return node;\n        }\n\n    }\n\n    insert(data) {\n        let newNode = new Node(data);\n\n        if(this.root === null)\n            this.root = newNode;\n        else\n            this.insertNode(this.root, newNode);\n    }\n\n    insertNode(node, newNode) {\n        if(newNode.data.productName < node.data.productName) {\n            if(node.left === null)\n                node.left = newNode;\n            else\n                this.insertNode(node.left, newNode);\n        } else {\n            if(node.right === null)\n                node.right = newNode;\n            else\n                this.insertNode(node.right,newNode);\n        }\n    }\n\n    inorder(root) {\n        if (!root) {\n            return;\n        }\n        this.inorder(root.left);\n        console.log(root.data);\n        this.inorder(root.right);\n    }\n\n    search(node, data) {\n        if(node === null)\n            return null;\n        else if(data < node.data.productName)\n            return this.search(node.left, data);\n        else if(data > node.data.productName)\n            return this.search(node.right, data);\n        else\n            return node;\n    }\n\n    toArray(node) {\n        let result = [];\n        if (node.left != null) {\n            result.push(this.toArray(node.left));\n        }\n    \n        if (node.right != null) {\n            result.push(this.toArray(node.right));\n        }\n        result.push(node.data);\n        return result;\n    }\n\n}\n\nexport default BST;"]},"metadata":{},"sourceType":"module"}
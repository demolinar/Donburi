{"ast":null,"code":"import users1 from \"../../data/users\";\n\nclass HashTable {\n  constructor(size) {\n    this.size = size;\n    this.array = Array(size);\n  }\n\n  hashFunction(key) {\n    let hashConst = 17;\n\n    for (let i = 0; i < key.length; i++) {\n      hashConst = 11 * hashConst * key.charCodeAt(i) % this.size;\n    }\n\n    return hashConst;\n  }\n\n  insert(key, value) {\n    if (this.search(key)) {\n      console.log(\"Not inserted\");\n    } else {\n      let index = this.hashFunction(key);\n\n      if (this.array[index]) {\n        this.array[index].push([key, value]);\n      } else {\n        this.array[index] = [[key, value]];\n      }\n    }\n  }\n\n  search(key) {\n    let index = this.hashFunction(key);\n\n    if (!this.array[index].find(x => x[0] === key)) {\n      return null;\n    }\n\n    return this.array[index].find(x => x[0] === key)[1];\n  }\n\n}\n\nlet hash = new HashTable(23);\n\nfor (let j = 0; j < users1.length; j++) {\n  hash.insert(users1[j].firstName, users1[j]);\n}\n\nconsole.log(hash.array);\nconsole.log(hash.search(\"Abbot\"));\nconsole.log(hash.search(\"At\"));\nexport default HashTable;","map":{"version":3,"sources":["/home/sebastian/Documents/Donburi-Donburi_Final_Delivery/src/components/DataStructures/HashTable.js"],"names":["users1","HashTable","constructor","size","array","Array","hashFunction","key","hashConst","i","length","charCodeAt","insert","value","search","console","log","index","push","find","x","hash","j","firstName"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB;;AACA,MAAMC,SAAN,CAAgB;AAEZC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaC,KAAK,CAACF,IAAD,CAAlB;AACH;;AAEDG,EAAAA,YAAY,CAACC,GAAD,EAAK;AACb,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,GAAG,CAACG,MAApB,EAA4BD,CAAC,EAA7B,EAAgC;AAC5BD,MAAAA,SAAS,GAAI,KAAKA,SAAL,GAAiBD,GAAG,CAACI,UAAJ,CAAeF,CAAf,CAAlB,GAAuC,KAAKN,IAAxD;AACH;;AACD,WAAOK,SAAP;AACH;;AAEDI,EAAAA,MAAM,CAACL,GAAD,EAAMM,KAAN,EAAY;AACd,QAAI,KAAKC,MAAL,CAAYP,GAAZ,CAAJ,EAAqB;AACjBQ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,KAFD,MAEO;AACH,UAAIC,KAAK,GAAG,KAAKX,YAAL,CAAkBC,GAAlB,CAAZ;;AACA,UAAI,KAAKH,KAAL,CAAWa,KAAX,CAAJ,EAAuB;AACnB,aAAKb,KAAL,CAAWa,KAAX,EAAkBC,IAAlB,CAAuB,CAACX,GAAD,EAAMM,KAAN,CAAvB;AACH,OAFD,MAEO;AACH,aAAKT,KAAL,CAAWa,KAAX,IAAoB,CAAC,CAACV,GAAD,EAAMM,KAAN,CAAD,CAApB;AACH;AACJ;AACJ;;AAEDC,EAAAA,MAAM,CAACP,GAAD,EAAK;AACP,QAAIU,KAAK,GAAG,KAAKX,YAAL,CAAkBC,GAAlB,CAAZ;;AACA,QAAG,CAAC,KAAKH,KAAL,CAAWa,KAAX,EAAkBE,IAAlB,CAAuBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASb,GAArC,CAAJ,EAA8C;AAC1C,aAAO,IAAP;AACH;;AACD,WAAO,KAAKH,KAAL,CAAWa,KAAX,EAAkBE,IAAlB,CAAuBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASb,GAArC,EAA0C,CAA1C,CAAP;AACH;;AAlCW;;AAqChB,IAAIc,IAAI,GAAG,IAAIpB,SAAJ,CAAc,EAAd,CAAX;;AAEA,KAAK,IAAIqB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACtB,MAAM,CAACU,MAAvB,EAA+BY,CAAC,EAAhC,EAAmC;AAC/BD,EAAAA,IAAI,CAACT,MAAL,CAAYZ,MAAM,CAACsB,CAAD,CAAN,CAAUC,SAAtB,EAAiCvB,MAAM,CAACsB,CAAD,CAAvC;AACH;;AACDP,OAAO,CAACC,GAAR,CAAYK,IAAI,CAACjB,KAAjB;AACAW,OAAO,CAACC,GAAR,CAAYK,IAAI,CAACP,MAAL,CAAY,OAAZ,CAAZ;AACAC,OAAO,CAACC,GAAR,CAAYK,IAAI,CAACP,MAAL,CAAY,IAAZ,CAAZ;AAEA,eAAeb,SAAf","sourcesContent":["import users1 from \"../../data/users\";\nclass HashTable {\n\n    constructor(size) {\n        this.size = size;\n        this.array = Array(size);\n    }\n\n    hashFunction(key){\n        let hashConst = 17;\n        for (let i=0; i<key.length; i++){\n            hashConst = (11 * hashConst * key.charCodeAt(i)) % this.size;\n        }\n        return hashConst;\n    }\n\n    insert(key, value){\n        if (this.search(key)){\n            console.log(\"Not inserted\");\n        } else {\n            let index = this.hashFunction(key);\n            if (this.array[index]) {\n                this.array[index].push([key, value]);\n            } else {\n                this.array[index] = [[key, value]];\n            }\n        }\n    }\n\n    search(key){\n        let index = this.hashFunction(key);\n        if(!this.array[index].find(x => x[0] === key)){\n            return null;\n        }\n        return this.array[index].find(x => x[0] === key)[1];\n    }\n}\n\nlet hash = new HashTable(23);\n\nfor( let j=0; j<users1.length; j++){\n    hash.insert(users1[j].firstName, users1[j]);\n}\nconsole.log(hash.array);\nconsole.log(hash.search(\"Abbot\"));\nconsole.log(hash.search(\"At\"));\n\nexport default HashTable;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"class Node {\n  constructor(key, data) {\n    this.key = key;\n    this.data = data;\n    this.left = this.right = null;\n  }\n\n}\n\nclass BST {\n  constructor() {\n    this.root = null;\n    this.array = [];\n    this.index = 0;\n  }\n\n  minValue(node) {\n    let current = node;\n\n    while (current && current.left != null) {\n      current = current.left;\n    }\n\n    return current;\n  }\n\n  maxValue(node) {\n    let current = node;\n\n    while (current && current.right != null) {\n      current = current.right;\n    }\n\n    return current;\n  }\n\n  delete(data) {\n    this.root = this.removeNode(this.root, data);\n  }\n\n  removeNode(node, key) {\n    if (node === null) return null;else if (key < node.key) {\n      node.left = this.removeNode(node.left, key);\n      return node;\n    } else if (key > node.key) {\n      node.right = this.removeNode(node.right, key);\n      return node;\n    } else {\n      if (node.left === null && node.right === null) {\n        node = null;\n        return node;\n      }\n\n      if (node.left === null) {\n        node = node.right;\n        return node;\n      } else if (node.right === null) {\n        node = node.left;\n        return node;\n      }\n\n      let aux = this.minValue(node.right);\n      node.data = aux.data;\n      node.key = aux.key;\n      node.right = this.removeNode(node.right, aux.key);\n      return node;\n    }\n  }\n\n  insert(key, data) {\n    let newNode = new Node(key, data);\n    if (this.root === null) this.root = newNode;else this.insertNode(this.root, newNode);\n  }\n\n  insertNode(node, newNode) {\n    if (newNode.key < node.key) {\n      if (node.left === null) node.left = newNode;else this.insertNode(node.left, newNode);\n    } else {\n      if (node.right === null) node.right = newNode;else this.insertNode(node.right, newNode);\n    }\n  }\n\n  inorder(root) {\n    if (!root) {\n      return;\n    }\n\n    this.inorder(root.left);\n    console.log(root.data);\n    this.inorder(root.right);\n  }\n\n  search(node, data) {\n    if (node === null) return null;else if (data < node.data) return this.search(node.left, data);else if (data > node.data) return this.search(node.right, data);else return node;\n  }\n\n  toArray(node) {\n    if (node == null) return;\n    this.toArray(node.left);\n    this.array[this.index++] = node.data;\n    this.toArray(node.right);\n    return this.array;\n  }\n\n}\n\nlet tree = new BST();\ntree.insert(3, 3);\ntree.insert(2, 2);\ntree.insert(0, 0);\ntree.insert(9, 9);\nconsole.log(tree.toArray(tree.root));\nexport default BST;","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/components/DataStructures/BST.js"],"names":["Node","constructor","key","data","left","right","BST","root","array","index","minValue","node","current","maxValue","delete","removeNode","aux","insert","newNode","insertNode","inorder","console","log","search","toArray","tree"],"mappings":"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","sourcesContent":["\nclass Node{\n\n    constructor(key, data) {\n        this.key = key;\n        this.data = data;\n        this.left = this.right = null;\n    }\n\n}\n\nclass BST {\n\n    constructor() {\n        this.root = null;\n        this.array = [];\n        this.index = 0;\n    }\n\n    minValue(node) {\n        let current = node;\n        while (current && current.left != null){\n            current = current.left;\n        }\n        return current;\n    }\n\n    maxValue(node) {\n        let current = node;\n        while (current && current.right != null){\n            current = current.right;\n        }\n        return current;\n    }\n\n    delete(data) {\n        this.root = this.removeNode(this.root, data);\n    }\n\n    removeNode(node, key) {\n\n        if(node === null)\n            return null;\n        else if(key<node.key) {\n            node.left = this.removeNode(node.left, key);\n            return node;\n        } else if(key>node.key) {\n            node.right = this.removeNode(node.right, key);\n            return node;\n        } else {\n            if(node.left === null && node.right === null) {\n                node = null;\n                return node;\n            }\n            if(node.left === null) {\n                node = node.right;\n                return node;\n            } else if(node.right === null) {\n                node = node.left;\n                return node;\n            }\n\n            let aux = this.minValue(node.right);\n            node.data = aux.data;\n            node.key = aux.key;\n\n            node.right = this.removeNode(node.right, aux.key);\n            return node;\n        }\n\n    }\n\n    insert(key, data) {\n        let newNode = new Node(key, data);\n\n        if(this.root === null)\n            this.root = newNode;\n        else\n            this.insertNode(this.root, newNode);\n    }\n\n    insertNode(node, newNode) {\n        if(newNode.key<node.key) {\n            if(node.left === null)\n                node.left = newNode;\n            else\n                this.insertNode(node.left, newNode);\n        } else {\n            if(node.right === null)\n                node.right = newNode;\n            else\n                this.insertNode(node.right,newNode);\n        }\n    }\n\n    inorder(root) {\n        if (!root) {\n            return;\n        }\n        this.inorder(root.left);\n        console.log(root.data);\n        this.inorder(root.right);\n    }\n\n    search(node, data) {\n        if(node === null)\n            return null;\n        else if(data < node.data)\n            return this.search(node.left, data);\n        else if(data > node.data)\n            return this.search(node.right, data);\n        else\n            return node;\n    }\n\n    toArray(node) {\n        if (node == null)\n            return;\n        this.toArray(node.left);\n        this.array[this.index++] = node.data;\n        this.toArray(node.right);\n        return this.array;\n    }\n\n}\n\nlet tree = new BST();\ntree.insert(3,3);\ntree.insert(2,2);\ntree.insert(0,0);\ntree.insert(9,9);\nconsole.log(tree.toArray(tree.root));\n\nexport default BST;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import make_attribute from \"./make_attribute\";\n\nclass Queue {\n  constructor(capacity) {\n    this.capacity = capacity;\n    this.front = 0;\n    this.size = 0;\n    this.rear = capacity - 1;\n    this.heap = new Array(this.capacity);\n  }\n\n  isFull() {\n    return this.size === this.capacity;\n  }\n\n  isEmpty() {\n    return this.size === 0;\n  }\n\n  enqueue(object) {\n    if (this.isFull()) {\n      return;\n    }\n\n    this.rear = (this.rear + 1) % this.capacity;\n    this.heap[this.rear] = object;\n    this.size = this.size + 1;\n    console.log(\"enqueued to queue\");\n  }\n\n  dequeue() {\n    if (this.isEmpty()) return 0;\n    let object = this.heap[this.front];\n    this.front = (this.front + 1) % this.capacity;\n    this.size = this.size - 1;\n    return object;\n  }\n\n  front() {\n    if (this.isEmpty()) {\n      return 0;\n    }\n\n    return this.heap[this.front];\n  }\n\n  rear() {\n    if (this.isEmpty()) {\n      return 0;\n    }\n\n    return this.heap[this.rear];\n  }\n\n}\n\nlet queue = new Queue(1000);\n\nfunction insert_products() {\n  for (let i = 0; i <= queue.capacity; i++) {\n    //Comment the next lines to prove with the objectlist\n    let product = make_attribute();\n    queue.enqueue(product); //Comment the next line to prove with make_attribute()\n  }\n} //Insertion time\n\n\nlet start = new Date();\nlet simulateTime = 1000;\ninsert_products();\nsetTimeout(function (argument) {\n  let end = new Date() - start;\n  console.info('Execution time (Insertion on Queue): %dms', end);\n}, simulateTime); //Deletion time\n\nlet start2 = new Date();\nlet simulateTime2 = 1000;\n\nfor (let j = 0; j < queue.capacity; j++) {\n  queue.dequeue();\n}\n\nsetTimeout(function (argument) {\n  let end = new Date() - start2;\n  console.info('Execution time (Delete on Queue): %dms', end);\n}, simulateTime2);\nexport default Queue;","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/components/Queue.js"],"names":["make_attribute","Queue","constructor","capacity","front","size","rear","heap","Array","isFull","isEmpty","enqueue","object","console","log","dequeue","queue","insert_products","i","product","start","Date","simulateTime","setTimeout","argument","end","info","start2","simulateTime2","j"],"mappings":"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","sourcesContent":["import make_attribute from \"./make_attribute\";\n\nclass Queue {\n    constructor(capacity) {\n        this.capacity = capacity;\n        this.front = 0;\n        this.size = 0;\n        this.rear = capacity - 1;\n        this.heap = new Array(this.capacity);\n    }\n\n    isFull() {\n        return (this.size === this.capacity);\n    }\n\n    isEmpty() {\n        return (this.size === 0);\n    }\n\n    enqueue(object) {\n        if (this.isFull()){\n            return;\n        }\n        this.rear = (this.rear + 1) % this.capacity;\n        this.heap[this.rear] = object;\n        this.size = this.size + 1;\n        console.log(\"enqueued to queue\");\n    }\n\n    dequeue() {\n        if (this.isEmpty())\n            return 0;\n\n        let object = this.heap[this.front];\n        this.front = (this.front + 1) % this.capacity;\n        this.size = this.size - 1;\n        return object;\n    }\n\n    front() {\n        if (this.isEmpty()) {\n            return 0;\n        }\n        return this.heap[this.front];\n    }\n\n    rear() {\n        if (this.isEmpty()) {\n            return 0;\n        }\n        return this.heap[this.rear];\n    }\n}\n\nlet queue = new Queue(1000);\n\nfunction insert_products(){\n    for (let i=0; i<=queue.capacity; i++){\n        //Comment the next lines to prove with the objectlist\n        let product = make_attribute();\n        queue.enqueue(product);\n        //Comment the next line to prove with make_attribute()\n    }\n}\n\n//Insertion time\nlet start = new Date()\nlet simulateTime = 1000\n\ninsert_products();\n\nsetTimeout(function(argument) {\n    let end = new Date() - start\n    console.info('Execution time (Insertion on Queue): %dms', end)\n}, simulateTime)\n\n\n//Deletion time\nlet start2 = new Date()\nlet simulateTime2 = 1000\n\nfor (let j=0; j<queue.capacity; j++){\n    queue.dequeue();\n}\n\nsetTimeout(function(argument) {\n    let end = new Date() - start2\n    console.info('Execution time (Delete on Queue): %dms', end)\n}, simulateTime2)\n\nexport default Queue;\n"]},"metadata":{},"sourceType":"module"}
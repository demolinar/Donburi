{"ast":null,"code":"class HashTable {\n  constructor(size) {\n    this.size = size;\n    this.array = Array(size);\n    this.items = 0;\n  }\n\n  hashFunction(key) {\n    let hashConst = 11;\n\n    for (let i = 0; i < key.length; i++) {\n      hashConst = 19 * hashConst * key.charCodeAt(i) % this.size;\n    }\n  }\n\n  insert(key, value) {\n    if (!this.search(key)) {\n      let index = this.hashFunction(key);\n\n      if (this.array[index]) {\n        this.array[index].push([key, value]);\n      } else {\n        this.array[index] = [[key, value]];\n      }\n\n      this.items++;\n    }\n  }\n\n  search(key) {\n    let index = this.hashFunction(key);\n    if (!this.array[index]) return null;\n    return this.array[index].find(x => x[0] === key)[1];\n  }\n\n}\n\nlet hash = new HashTable(9);\nhash.insert('Lewis', {\n  name: 'Lewis',\n  id: 1033\n});\nhash.insert('Dani', {\n  name: 'Dani',\n  id: 1099\n});\nconsole.log(hash.search('Lewis'));\nconsole.log(hash.search('Dani'));\nexport default HashTable;","map":{"version":3,"sources":["/home/sebastian/Documents/Donburi-Donburi_Final_Delivery/src/components/DataStructures/HashTable.js"],"names":["HashTable","constructor","size","array","Array","items","hashFunction","key","hashConst","i","length","charCodeAt","insert","value","search","index","push","find","x","hash","name","id","console","log"],"mappings":"AACA,MAAMA,SAAN,CAAgB;AAEZC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaC,KAAK,CAACF,IAAD,CAAlB;AACA,SAAKG,KAAL,GAAa,CAAb;AACH;;AAEDC,EAAAA,YAAY,CAACC,GAAD,EAAK;AACb,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,GAAG,CAACG,MAApB,EAA4BD,CAAC,EAA7B,EAAgC;AAC5BD,MAAAA,SAAS,GAAI,KAAKA,SAAL,GAAiBD,GAAG,CAACI,UAAJ,CAAeF,CAAf,CAAlB,GAAuC,KAAKP,IAAxD;AACH;AACJ;;AAEDU,EAAAA,MAAM,CAACL,GAAD,EAAMM,KAAN,EAAY;AACd,QAAG,CAAC,KAAKC,MAAL,CAAYP,GAAZ,CAAJ,EAAqB;AACjB,UAAIQ,KAAK,GAAG,KAAKT,YAAL,CAAkBC,GAAlB,CAAZ;;AACA,UAAI,KAAKJ,KAAL,CAAWY,KAAX,CAAJ,EAAsB;AAClB,aAAKZ,KAAL,CAAWY,KAAX,EAAkBC,IAAlB,CAAuB,CAACT,GAAD,EAAMM,KAAN,CAAvB;AACH,OAFD,MAEO;AACH,aAAKV,KAAL,CAAWY,KAAX,IAAoB,CAAC,CAACR,GAAD,EAAMM,KAAN,CAAD,CAApB;AACH;;AACD,WAAKR,KAAL;AACH;AACJ;;AAEDS,EAAAA,MAAM,CAACP,GAAD,EAAK;AACP,QAAIQ,KAAK,GAAG,KAAKT,YAAL,CAAkBC,GAAlB,CAAZ;AACA,QAAG,CAAC,KAAKJ,KAAL,CAAWY,KAAX,CAAJ,EACI,OAAO,IAAP;AACJ,WAAO,KAAKZ,KAAL,CAAWY,KAAX,EAAkBE,IAAlB,CAAuBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASX,GAArC,EAA0C,CAA1C,CAAP;AACH;;AAhCW;;AAmChB,IAAIY,IAAI,GAAG,IAAInB,SAAJ,CAAc,CAAd,CAAX;AACAmB,IAAI,CAACP,MAAL,CAAY,OAAZ,EAAqB;AAACQ,EAAAA,IAAI,EAAE,OAAP;AAAgBC,EAAAA,EAAE,EAAE;AAApB,CAArB;AACAF,IAAI,CAACP,MAAL,CAAY,MAAZ,EAAoB;AAACQ,EAAAA,IAAI,EAAE,MAAP;AAAeC,EAAAA,EAAE,EAAE;AAAnB,CAApB;AACAC,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACL,MAAL,CAAY,OAAZ,CAAZ;AACAQ,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACL,MAAL,CAAY,MAAZ,CAAZ;AACA,eAAed,SAAf","sourcesContent":["\nclass HashTable {\n\n    constructor(size) {\n        this.size = size;\n        this.array = Array(size);\n        this.items = 0;\n    }\n\n    hashFunction(key){\n        let hashConst = 11;\n        for (let i=0; i<key.length; i++){\n            hashConst = (19 * hashConst * key.charCodeAt(i)) % this.size;\n        }\n    }\n\n    insert(key, value){\n        if(!this.search(key)){\n            let index = this.hashFunction(key);\n            if (this.array[index]){\n                this.array[index].push([key, value]);\n            } else {\n                this.array[index] = [[key, value]];\n            }\n            this.items++;\n        }\n    }\n\n    search(key){\n        let index = this.hashFunction(key);\n        if(!this.array[index])\n            return null;\n        return this.array[index].find(x => x[0] === key)[1];\n    }\n}\n\nlet hash = new HashTable(9);\nhash.insert('Lewis', {name: 'Lewis', id: 1033});\nhash.insert('Dani', {name: 'Dani', id: 1099});\nconsole.log(hash.search('Lewis'));\nconsole.log(hash.search('Dani'));\nexport default HashTable;"]},"metadata":{},"sourceType":"module"}
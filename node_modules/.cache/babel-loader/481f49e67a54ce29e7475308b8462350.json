{"ast":null,"code":"import GenericNode from \"./GenericNode\";\n\nclass GenericLinkedList {\n  constructor() {\n    this.head = null;\n    this.size = 0;\n  }\n\n  add(element) {\n    let node = new GenericNode(element);\n    let current;\n    if (this.head == null) this.head = node;else {\n      current = this.head;\n\n      while (current.next) {\n        current = current.next;\n      }\n\n      current.next = node;\n    }\n    this.size++;\n  }\n\n  insertAt(element, index) {\n    if (index > 0 && index > this.size) return false;else {\n      let node = new GenericNode(element);\n      let curr, prev;\n      curr = this.head;\n\n      if (index === 0) {\n        node.next = this.head;\n        this.head = node;\n      } else {\n        curr = this.head;\n        let it = 0;\n\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr.next;\n        } // adding an element\n\n\n        node.next = curr;\n        prev.next = node;\n      }\n\n      this.size++;\n    }\n  }\n\n  removeFrom(index) {\n    if (index > 0 && index > this.size) return -1;else {\n      let curr,\n          prev,\n          it = 0;\n      curr = this.head;\n      prev = curr;\n\n      if (index === 0) {\n        this.head = curr.next;\n      } else {\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr.next;\n        }\n\n        prev.next = curr.next;\n      }\n\n      this.size--;\n      return curr.element;\n    }\n  }\n\n  removeElement(element) {\n    let current = this.head;\n    let prev = null;\n\n    while (current != null) {\n      if (current.element === element) {\n        if (prev == null) {\n          this.head = current.next;\n        } else {\n          prev.next = current.next;\n        }\n\n        this.size--;\n        return current.element;\n      }\n\n      prev = current;\n      current = current.next;\n    }\n\n    return -1;\n  }\n\n  indexOf(element) {\n    let count = 0;\n    let current = this.head;\n\n    while (current != null) {\n      if (current.element === element) return count;\n      count++;\n      current = current.next;\n    }\n\n    return -1;\n  }\n\n  isEmpty() {\n    return this.size === 0;\n  }\n\n  printList() {\n    let curr = this.head;\n    let str = \"\";\n\n    while (curr) {\n      str += curr.element + \" \";\n      curr = curr.next;\n    }\n\n    console.log(str);\n  }\n\n  search(key) {\n    let current = this.head;\n\n    while (current !== null) {\n      if (current.key === key) return true;\n    }\n\n    return false;\n  }\n\n  pushToArray() {\n    let array = [];\n    let curr = this.head;\n\n    while (curr !== null) {\n      array.push(curr.element);\n      curr = curr.next;\n    }\n\n    return array;\n  }\n\n}\n\nexport default GenericLinkedList;","map":{"version":3,"sources":["/home/sebastian/Documents/donburi_react_app/src/components/GenericLinkedList.js"],"names":["GenericNode","GenericLinkedList","constructor","head","size","add","element","node","current","next","insertAt","index","curr","prev","it","removeFrom","removeElement","indexOf","count","isEmpty","printList","str","console","log","search","key","pushToArray","array","push"],"mappings":"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","sourcesContent":["import GenericNode from \"./GenericNode\";\n\nclass GenericLinkedList {\n    constructor()\n    {\n        this.head = null;\n        this.size = 0;\n    }\n\n    add(element)\n    {\n        let node = new GenericNode(element);\n        let current;\n\n        if (this.head == null)\n            this.head = node;\n        else {\n            current = this.head;\n            while (current.next) {\n                current = current.next;\n            }\n            current.next = node;\n        }\n        this.size++;\n    }\n\n    insertAt(element, index)\n    {\n        if (index > 0 && index > this.size)\n            return false;\n        else {\n            let node = new GenericNode(element);\n            let curr, prev;\n\n            curr = this.head;\n\n            if (index === 0) {\n                node.next = this.head;\n                this.head = node;\n            } else {\n                curr = this.head;\n                let it = 0;\n\n                while (it < index) {\n                    it++;\n                    prev = curr;\n                    curr = curr.next;\n                }\n\n                // adding an element\n                node.next = curr;\n                prev.next = node;\n            }\n            this.size++;\n        }\n    }\n\n    removeFrom(index)\n    {\n        if (index > 0 && index > this.size)\n            return -1;\n        else {\n            let curr, prev, it = 0;\n            curr = this.head;\n            prev = curr;\n\n            if (index === 0) {\n                this.head = curr.next;\n            } else {\n\n                while (it < index) {\n                    it++;\n                    prev = curr;\n                    curr = curr.next;\n                }\n                prev.next = curr.next;\n            }\n            this.size--;\n            return curr.element;\n        }\n    }\n\n    removeElement(element)\n    {\n        let current = this.head;\n        let prev = null;\n\n        while (current != null) {\n\n            if (current.element === element) {\n                if (prev == null) {\n                    this.head = current.next;\n                } else {\n                    prev.next = current.next;\n                }\n                this.size--;\n                return current.element;\n            }\n            prev = current;\n            current = current.next;\n        }\n        return -1;\n    }\n\n    indexOf(element)\n    {\n        let count = 0;\n        let current = this.head;\n\n        while (current != null) {\n            if (current.element === element)\n                return count;\n            count++;\n            current = current.next;\n        }\n        return -1;\n    }\n\n    isEmpty()\n    {\n        return this.size === 0;\n    }\n\n    printList()\n    {\n        let curr = this.head;\n        let str = \"\";\n        while (curr) {\n            str += curr.element + \" \";\n            curr = curr.next;\n        }\n        console.log(str);\n    }\n\n    search(key){\n        let current = this.head;\n        while (current !== null){\n            if (current.key === key)\n                return true;\n        }\n        return false;\n    }\n\n    pushToArray(){\n        let array = [];\n        let curr = this.head;\n\n        while (curr !== null) {\n            array.push(curr.element);\n            curr = curr.next;\n        }\n        return array;\n    }\n\n}\n\nexport default GenericLinkedList;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import users1 from \"../../../public/data/users\";\n\nclass HashTable {\n  constructor(size) {\n    this.size = size;\n    this.array = Array(size);\n    this.items = 0;\n    this.loadFactor = this.items / this.size;\n  }\n\n  hashFunction(key) {\n    let hashConst = 11;\n\n    for (let i = 0; i < key.length; i++) {\n      hashConst = 19 * hashConst * key.charCodeAt(i) % this.size;\n    }\n  }\n\n  insert(key, value) {\n    if (this.loadFactor >= 0.8) {\n      let copy = this.array;\n      this.array = Array(this.size * 2);\n      this.array.concat(copy);\n    }\n\n    if (!this.search(key)) {\n      let index = this.hashFunction(key);\n\n      if (this.array[index]) {\n        this.array[index].push([key, value]);\n      } else {\n        this.array[index] = [[key, value]];\n      }\n\n      this.items++;\n    }\n  }\n\n  search(key) {\n    let index = this.hashFunction(key);\n    if (!this.array[index]) return null;\n    return this.array[index].find(x => x[0] === key)[1];\n  }\n\n}\n\nlet hash = new HashTable(403);\n\nfor (let j = 0; j < hash.size; j++) {\n  hash.insert(users1[j].name, users1[j]);\n}\n\nconsole.log(hash.search('Len Owens'));\nexport default HashTable;","map":{"version":3,"sources":["/home/sebastian/Documents/Donburi-Donburi_Final_Delivery/src/components/DataStructures/HashTable.js"],"names":["users1","HashTable","constructor","size","array","Array","items","loadFactor","hashFunction","key","hashConst","i","length","charCodeAt","insert","value","copy","concat","search","index","push","find","x","hash","j","name","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,4BAAnB;;AACA,MAAMC,SAAN,CAAgB;AAEZC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaC,KAAK,CAACF,IAAD,CAAlB;AACA,SAAKG,KAAL,GAAa,CAAb;AACA,SAAKC,UAAL,GAAkB,KAAKD,KAAL,GAAW,KAAKH,IAAlC;AACH;;AAEDK,EAAAA,YAAY,CAACC,GAAD,EAAK;AACb,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,GAAG,CAACG,MAApB,EAA4BD,CAAC,EAA7B,EAAgC;AAC5BD,MAAAA,SAAS,GAAI,KAAKA,SAAL,GAAiBD,GAAG,CAACI,UAAJ,CAAeF,CAAf,CAAlB,GAAuC,KAAKR,IAAxD;AACH;AACJ;;AAEDW,EAAAA,MAAM,CAACL,GAAD,EAAMM,KAAN,EAAY;AACd,QAAG,KAAKR,UAAL,IAAmB,GAAtB,EAA0B;AACtB,UAAIS,IAAI,GAAG,KAAKZ,KAAhB;AACA,WAAKA,KAAL,GAAaC,KAAK,CAAC,KAAKF,IAAL,GAAU,CAAX,CAAlB;AACA,WAAKC,KAAL,CAAWa,MAAX,CAAkBD,IAAlB;AACH;;AACD,QAAG,CAAC,KAAKE,MAAL,CAAYT,GAAZ,CAAJ,EAAqB;AACjB,UAAIU,KAAK,GAAG,KAAKX,YAAL,CAAkBC,GAAlB,CAAZ;;AACA,UAAI,KAAKL,KAAL,CAAWe,KAAX,CAAJ,EAAsB;AAClB,aAAKf,KAAL,CAAWe,KAAX,EAAkBC,IAAlB,CAAuB,CAACX,GAAD,EAAMM,KAAN,CAAvB;AACH,OAFD,MAEO;AACH,aAAKX,KAAL,CAAWe,KAAX,IAAoB,CAAC,CAACV,GAAD,EAAMM,KAAN,CAAD,CAApB;AACH;;AACD,WAAKT,KAAL;AACH;AACJ;;AAEDY,EAAAA,MAAM,CAACT,GAAD,EAAK;AACP,QAAIU,KAAK,GAAG,KAAKX,YAAL,CAAkBC,GAAlB,CAAZ;AACA,QAAG,CAAC,KAAKL,KAAL,CAAWe,KAAX,CAAJ,EACI,OAAO,IAAP;AACJ,WAAO,KAAKf,KAAL,CAAWe,KAAX,EAAkBE,IAAlB,CAAuBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASb,GAArC,EAA0C,CAA1C,CAAP;AACH;;AAtCW;;AAyChB,IAAIc,IAAI,GAAG,IAAItB,SAAJ,CAAc,GAAd,CAAX;;AACA,KAAI,IAAIuB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,IAAI,CAACpB,IAApB,EAA0BqB,CAAC,EAA3B,EAA8B;AAC1BD,EAAAA,IAAI,CAACT,MAAL,CAAYd,MAAM,CAACwB,CAAD,CAAN,CAAUC,IAAtB,EAA2BzB,MAAM,CAACwB,CAAD,CAAjC;AACH;;AACDE,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACL,MAAL,CAAY,WAAZ,CAAZ;AAEA,eAAejB,SAAf","sourcesContent":["import users1 from \"../../../public/data/users\";\nclass HashTable {\n\n    constructor(size) {\n        this.size = size;\n        this.array = Array(size);\n        this.items = 0;\n        this.loadFactor = this.items/this.size;\n    }\n\n    hashFunction(key){\n        let hashConst = 11;\n        for (let i=0; i<key.length; i++){\n            hashConst = (19 * hashConst * key.charCodeAt(i)) % this.size;\n        }\n    }\n\n    insert(key, value){\n        if(this.loadFactor >= 0.8){\n            let copy = this.array;\n            this.array = Array(this.size*2);\n            this.array.concat(copy);\n        }\n        if(!this.search(key)){\n            let index = this.hashFunction(key);\n            if (this.array[index]){\n                this.array[index].push([key, value]);\n            } else {\n                this.array[index] = [[key, value]];\n            }\n            this.items++;\n        }\n    }\n\n    search(key){\n        let index = this.hashFunction(key);\n        if(!this.array[index])\n            return null;\n        return this.array[index].find(x => x[0] === key)[1];\n    }\n}\n\nlet hash = new HashTable(403);\nfor(let j=0; j<hash.size; j++){\n    hash.insert(users1[j].name,users1[j]);\n}\nconsole.log(hash.search('Len Owens'))\n\nexport default HashTable;"]},"metadata":{},"sourceType":"module"}
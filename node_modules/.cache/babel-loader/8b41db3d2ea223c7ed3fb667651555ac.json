{"ast":null,"code":"var _jsxFileName = \"/home/sebastian/Documents/Donburi-Donburi_Final_Delivery/src/Context.js\";\n\n/* Context.js: Maneja la actualización de los Detalles de los producto, así como la actualización de los precios y totales del carrito de compras.\n*/\nimport React, { Component } from \"react\";\nimport product_array_list from \"./components/ProgramDrivers/ProductArrayListDriver\";\nimport product_linked_list from \"./components/ProgramDrivers/ProductLinkedListDriver\";\nimport PriorityQueue from \"./components/DataStructures/PriorityQueue\";\nimport Queue from \"./components/DataStructures/Queue\";\nimport product_tree from \"./components/ProgramDrivers/ProductTreeDriver\";\nimport usersHash from \"./data/users\";\nconst productDetails = {\n  productName: \"Sushi\",\n  productCode: \"Ab0303\",\n  productPrice: 21000,\n  img: \"://0\",\n  inCart: false,\n  details: \"Utamur hendrerit cu est. Nihil torquatos qui ut. Mollis malorum perfecto vix ne. \" + \"Quo id tritani discere dolores, noster eirmod ancillae an sea, ut cum debet delenit accusamus. \" + \"Duo ex oporteat imperdiet urbanitas.\"\n};\nconst ProductContext = React.createContext(); //ProductProvider: Contiene el estado (state) de los datos del programa, asi como las funciones de actualización.\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      users: usersHash,\n      products: [],\n      searchResults: [],\n      productsLinked: product_linked_list,\n      productsTree: product_tree,\n      productDetails: productDetails,\n      shoppingCartQueue: new Queue(),\n      shoppingCart: new PriorityQueue(),\n      productPreviewOpen: false,\n      productPreviewModel: productDetails,\n      cartSubTotal: 0,\n      cartTax: 0,\n      cartTotal: 0,\n      searchString: ''\n    };\n\n    this.setFirstName = e => {\n      let fn = e.currentTarget.value;\n      this.setState(() => {\n        return {\n          firstName: fn\n        };\n      });\n    };\n\n    this.setLastName = e => {\n      let ln = e.currentTarget.value;\n      this.setState(() => {\n        return {\n          lastName: ln\n        };\n      });\n    };\n\n    this.setEmail = e => {\n      let em = e.currentTarget.value;\n      this.setState(() => {\n        return {\n          email: em\n        };\n      });\n    };\n\n    this.setPassword = e => {\n      let p = e.currentTarget.value;\n      this.setState(() => {\n        return {\n          password: p\n        };\n      });\n    };\n\n    this.register = () => {\n      let newUser = {\n        firstName: this.state.firstName,\n        lastName: this.state.lastName,\n        email: this.state.email,\n        password: this.state.password\n      };\n      this.setState(() => {\n        return {\n          users: this.state.users.insert(newUser.firstName, newUser),\n          firstName: \"\",\n          lastName: \"\",\n          email: \"\",\n          password: \"\"\n        };\n      });\n      console.log(this.state.users.array);\n      console.log(this.state.users.search(newUser.firstName));\n    };\n\n    this.setProducts = () => {\n      let products = [];\n      product_array_list.array.forEach(item => {\n        const singleItem = { ...item\n        };\n        products = [...products, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: products\n        };\n      });\n    };\n\n    this.getItem = productName => {\n      const product = this.state.products.find(item => item.productName === productName);\n      return product;\n    };\n\n    this.getSearch = () => {\n      const search = this.state.searchString;\n      return search;\n    };\n\n    this.handleDetail = productName => {\n      const product = this.getItem(productName);\n      this.setState(() => {\n        return {\n          productDetails: product\n        };\n      });\n    };\n\n    this.addToCart = productName => {\n      let auxProducts = [...this.state.products];\n      const index = auxProducts.indexOf(this.getItem(productName));\n      const product = auxProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      const price = product.productPrice;\n      product.total = price;\n      this.state.shoppingCart.insert(product);\n      /*this.state.shoppingCartQueue.enqueue(product);*/\n\n      this.setState(() => {\n        return {\n          products: auxProducts,\n          shoppingCar: this.state.shoppingCart\n          /* shopṕíngCartQueue: this.state.shoppingCartQueue*/\n\n        };\n      }, () => {\n        this.calculateTotal();\n      });\n    };\n\n    this.setSearch = e => {\n      let search = e.currentTarget.value;\n      console.log(e.currentTarget.value);\n      this.setState(() => {\n        return {\n          searchString: search\n        };\n      });\n    };\n\n    this.clearSearch = () => {\n      this.setState(() => {\n        return {\n          searchString: ''\n        };\n      });\n    };\n\n    this.search = () => {\n      if (this.state.searchString === '') {\n        this.setState(() => {\n          return {\n            searchResults: []\n          };\n        });\n      }\n\n      let aux = [...this.state.products];\n      let results = aux.filter(product => {\n        return product.productName.toLowerCase().indexOf(this.getSearch()) !== -1;\n      });\n      this.setState(() => {\n        return {\n          searchResults: results\n        };\n      });\n    };\n\n    this.openProductPreview = productName => {\n      const product = this.getItem(productName);\n      this.setState(() => {\n        return {\n          productPreviewModel: product,\n          productPreviewOpen: true\n        };\n      });\n    };\n\n    this.closeProductPreview = () => {\n      this.setState(() => {\n        return {\n          productPreviewOpen: false\n        };\n      });\n    };\n\n    this.addQuantity = productName => {\n      let tempCart = this.state.shoppingCart; // let tempCart1 = this.state.shoppingCartQueue;\n\n      const selectedProduct = tempCart.heap.find(item => item[0].productName === productName); // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n      const index = tempCart.heap.indexOf(selectedProduct);\n      const product = tempCart.heap[index]; // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n      // const product1 = tempCart1.heap[index1];\n\n      product[0].count++;\n      product[0].total = product[0].count * product[0].productPrice; // product1.count++;\n      // product1.total = product1.count * product1.productPrice;\n\n      this.setState(() => {\n        return {\n          shoppingCart: tempCart\n          /*shoppingCartQueue: tempCart1*/\n\n        };\n      }, () => {\n        this.calculateTotal();\n      });\n    };\n\n    this.decreaseQuantity = productName => {\n      let tempCart = this.state.shoppingCart; // let tempCart1 = this.state.shoppingCartQueue;\n\n      const selectedProduct = tempCart.heap.find(item => item[0].productName === productName); // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n      const index = tempCart.heap.indexOf(selectedProduct);\n      const product = tempCart.heap[index]; // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n      // const product1 = tempCart1.heap[index1];\n\n      if (product[0].count === 0) {\n        product[0].count = 0;\n      } else {\n        product[0].count = product[0].count - 1;\n        product[0].total = product[0].count * product[0].productPrice;\n        this.setState(() => {\n          return {\n            shoppingCart: tempCart\n          };\n        }, () => {\n          this.calculateTotal();\n        });\n      } // if (product1.count === 0){\n      //     product1.count = 0;\n      // } else {\n      //     product1.count = product1.count - 1;\n      //     product1.total = product1.count * product1.productPrice;\n      //     this.setState(() => {\n      //         return{shoppingCartQueue: tempCart1};\n      //     }, () => {\n      //         this.calculateTotal();\n      //     });\n      // }\n\n    };\n\n    this.removeItem = productName => {\n      let auxProducts = [...this.state.products];\n      let tempCart = this.state.shoppingCart;\n      tempCart = tempCart.heap.filter(item => item[0].productName !== productName);\n      const index = auxProducts.indexOf(this.getItem(productName));\n      let removed = auxProducts[index];\n      removed.inCart = false;\n      removed.total = 0;\n      removed.count = 0;\n      let newCart = new PriorityQueue();\n      newCart.heap = tempCart;\n      this.setState(() => {\n        return {\n          shoppingCart: newCart,\n          products: [...auxProducts]\n        };\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          shoppingCart: new PriorityQueue()\n        };\n      }, () => {\n        this.setProducts();\n        this.calculateTotal();\n      });\n    };\n\n    this.calculateTotal = () => {\n      let subTotal = 0;\n      this.state.shoppingCart.heap.map(item => subTotal += item[0].total);\n      const tempTax = subTotal * 0.19;\n      const tax = parseFloat(tempTax.toFixed(2));\n      const total = subTotal + tax;\n      this.setState(() => {\n        return {\n          cartSubTotal: subTotal,\n          cartTax: tax,\n          cartTotal: total\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setProducts();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        setFirstName: this.setFirstName,\n        setLastName: this.setLastName,\n        setEmail: this.setEmail,\n        setPassword: this.setPassword,\n        register: this.register,\n        addToCart: this.addToCart,\n        handleDetail: this.handleDetail,\n        search: this.search,\n        getSearch: this.getSearch,\n        setSearch: this.setSearch,\n        clearSearch: this.clearSearch,\n        openProductPreview: this.openProductPreview,\n        closeProductPreview: this.closeProductPreview,\n        addQuantity: this.addQuantity,\n        decreaseQuantity: this.decreaseQuantity,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["/home/sebastian/Documents/Donburi-Donburi_Final_Delivery/src/Context.js"],"names":["React","Component","product_array_list","product_linked_list","PriorityQueue","Queue","product_tree","usersHash","productDetails","productName","productCode","productPrice","img","inCart","details","ProductContext","createContext","ProductProvider","state","firstName","lastName","email","password","users","products","searchResults","productsLinked","productsTree","shoppingCartQueue","shoppingCart","productPreviewOpen","productPreviewModel","cartSubTotal","cartTax","cartTotal","searchString","setFirstName","e","fn","currentTarget","value","setState","setLastName","ln","setEmail","em","setPassword","p","register","newUser","insert","console","log","array","search","setProducts","forEach","item","singleItem","getItem","product","find","getSearch","handleDetail","addToCart","auxProducts","index","indexOf","count","price","total","shoppingCar","calculateTotal","setSearch","clearSearch","aux","results","filter","toLowerCase","openProductPreview","closeProductPreview","addQuantity","tempCart","selectedProduct","heap","decreaseQuantity","removeItem","removed","newCart","clearCart","subTotal","map","tempTax","tax","parseFloat","toFixed","componentDidMount","render","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["/* Context.js: Maneja la actualización de los Detalles de los producto, así como la actualización de los precios y totales del carrito de compras.\n*/\n\nimport React, {Component} from \"react\";\nimport product_array_list from \"./components/ProgramDrivers/ProductArrayListDriver\";\nimport product_linked_list from \"./components/ProgramDrivers/ProductLinkedListDriver\";\nimport PriorityQueue from \"./components/DataStructures/PriorityQueue\";\nimport Queue from \"./components/DataStructures/Queue\";\nimport product_tree from \"./components/ProgramDrivers/ProductTreeDriver\";\nimport usersHash from \"./data/users\";\n\nconst productDetails = {\n    productName: \"Sushi\",\n    productCode: \"Ab0303\",\n    productPrice: 21000,\n    img: \"://0\",\n    inCart: false,\n    details: \"Utamur hendrerit cu est. Nihil torquatos qui ut. Mollis malorum perfecto vix ne. \" +\n        \"Quo id tritani discere dolores, noster eirmod ancillae an sea, ut cum debet delenit accusamus. \" +\n        \"Duo ex oporteat imperdiet urbanitas.\"\n}\n\nconst ProductContext = React.createContext();\n\n//ProductProvider: Contiene el estado (state) de los datos del programa, asi como las funciones de actualización.\nclass ProductProvider extends Component{\n    state = {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        users: usersHash,\n        products: [],\n        searchResults: [],\n        productsLinked: product_linked_list,\n        productsTree: product_tree,\n        productDetails: productDetails,\n        shoppingCartQueue: new Queue(),\n        shoppingCart: new PriorityQueue(),\n        productPreviewOpen: false,\n        productPreviewModel: productDetails,\n        cartSubTotal: 0,\n        cartTax: 0,\n        cartTotal: 0,\n        searchString:''\n    };\n\n    componentDidMount() {\n        this.setProducts();\n    };\n\n    setFirstName = e => {\n        let fn = e.currentTarget.value;\n        this.setState(()=> {\n            return {firstName: fn}\n        })\n    }\n\n    setLastName = e => {\n        let ln = e.currentTarget.value;\n        this.setState(()=> {\n            return {lastName: ln}\n        })\n    }\n\n    setEmail = e => {\n        let em = e.currentTarget.value;\n        this.setState(()=> {\n            return {email: em}\n        })\n    }\n\n    setPassword = e => {\n        let p = e.currentTarget.value;\n        this.setState(()=> {\n            return {password: p}\n        })\n    }\n\n    register = () => {\n        let newUser = {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            email: this.state.email,\n            password: this.state.password\n        };\n        this.setState( () => {\n            return {users: this.state.users.insert(newUser.firstName, newUser),\n                firstName: \"\",\n                lastName: \"\",\n                email: \"\",\n                password: \"\"\n            }\n        });\n        console.log(this.state.users.array);\n        console.log(this.state.users.search(newUser.firstName));\n    }\n\n    //getItem: Realiza una copia del ArrayList en state.products, la cual permite que no se modifiquen los datos en el ArrayList original de productos.\n    setProducts = () => {\n        let products = [];\n        product_array_list.array.forEach(item => {\n            const singleItem = {...item};\n            products = [...products, singleItem];\n        })\n\n        this.setState(()=>{\n            return {products:products};\n        });\n    };\n\n    //getItem: Busca un producto en específico en la lista state.products, la cual permite que no se modifiquen los datos en el ArrayList original de productos.\n    getItem = productName => {\n        const product = this.state.products.find(item => item.productName === productName);\n        return product;\n    };\n\n    getSearch = () => {\n        const search = this.state.searchString;\n        return search;\n    }\n\n    //handleDetail: Gestiona los detalles de un producto dado.\n    handleDetail = productName => {\n        const product = this.getItem(productName);\n        this.setState(() => {\n            return {productDetails:product};\n        });\n    };\n\n    //addToCar: Añade un producto al carrito de compras.\n    addToCart = productName => {\n        let auxProducts = [...this.state.products];\n        const index = auxProducts.indexOf(this.getItem(productName));\n        const product = auxProducts[index];\n\n        product.inCart = true;\n        product.count = 1;\n        const price = product.productPrice;\n        product.total = price;\n\n        this.state.shoppingCart.insert(product);\n        /*this.state.shoppingCartQueue.enqueue(product);*/\n\n        this.setState(() => {\n            return {products: auxProducts, shoppingCar: this.state.shoppingCart/* shopṕíngCartQueue: this.state.shoppingCartQueue*/};\n        },() => {\n            this.calculateTotal();\n        });\n    };\n\n    setSearch = e => {\n        let search = e.currentTarget.value;\n        console.log(e.currentTarget.value);\n        this.setState(() => {\n            return {searchString: search};\n        });\n    }\n\n    clearSearch = () =>{\n        this.setState(() => {\n            return {searchString: ''};\n        });\n    }\n\n    //search: Filtra la lista de productos y devuelve el resultado\n    search = () => {\n        if(this.state.searchString === ''){\n            this.setState(() => {\n                return {searchResults: []};\n            });\n        }\n        let aux = [...this.state.products];\n        let results = aux.filter(product => {\n            return product.productName.toLowerCase().indexOf(this.getSearch()) !== -1;\n        })\n        this.setState(() => {\n            return {searchResults: results};\n        });\n    }\n\n    //openProductPreview: Cambia el valor de verdad de productPreviewOpen, la cual activa la vista de detalles del producto recién añadido al carrito.\n    openProductPreview = productName => {\n        const product = this.getItem(productName);\n        this.setState(() => {\n            return {productPreviewModel: product, productPreviewOpen: true};\n        });\n    };\n\n    //closeProductPreview: Cambia el valor de verdad de productPreviewOpen, la cual desactiva la vista de detalles del producto recién añadido al carrito.\n    closeProductPreview = () => {\n        this.setState(() => {\n            return {productPreviewOpen: false};\n        });\n    };\n\n    //addQuantity: Aumenta la cantidad de un mismo producto dentro del carrito de compras.\n    addQuantity = productName => {\n        let tempCart = this.state.shoppingCart;\n        // let tempCart1 = this.state.shoppingCartQueue;\n\n        const selectedProduct = tempCart.heap.find(item => item[0].productName === productName);\n        // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n        const index = tempCart.heap.indexOf(selectedProduct);\n        const product = tempCart.heap[index];\n        // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n        // const product1 = tempCart1.heap[index1];\n\n        product[0].count++;\n        product[0].total = product[0].count * product[0].productPrice;\n        // product1.count++;\n        // product1.total = product1.count * product1.productPrice;\n\n        this.setState(() => {\n            return{shoppingCart: tempCart, /*shoppingCartQueue: tempCart1*/};\n        }, () => {\n            this.calculateTotal();\n        });\n    };\n\n    //decreaseQuantity: Disminuye la cantidad de un mismo producto dentro del carrito de compras.\n    decreaseQuantity = productName => {\n        let tempCart = this.state.shoppingCart;\n        // let tempCart1 = this.state.shoppingCartQueue;\n\n        const selectedProduct = tempCart.heap.find(item => item[0].productName === productName);\n        // const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n        const index = tempCart.heap.indexOf(selectedProduct);\n        const product = tempCart.heap[index];\n        // const index1 = tempCart1.heap.indexOf(selectedProduct1)\n        // const product1 = tempCart1.heap[index1];\n\n        if (product[0].count === 0){\n            product[0].count = 0;\n        } else {\n            product[0].count = product[0].count - 1;\n            product[0].total = product[0].count * product[0].productPrice;\n            this.setState(() => {\n                return{shoppingCart: tempCart};\n            }, () => {\n                this.calculateTotal();\n            });\n        }\n\n        // if (product1.count === 0){\n        //     product1.count = 0;\n        // } else {\n        //     product1.count = product1.count - 1;\n        //     product1.total = product1.count * product1.productPrice;\n        //     this.setState(() => {\n        //         return{shoppingCartQueue: tempCart1};\n        //     }, () => {\n        //         this.calculateTotal();\n        //     });\n        // }\n    };\n\n    //removeItem: Remueve un producto en específico del carrito.\n    removeItem = productName => {\n        let auxProducts = [...this.state.products];\n        let tempCart = this.state.shoppingCart;\n        tempCart = tempCart.heap.filter(item => item[0].productName !== productName);\n\n        const index = auxProducts.indexOf(this.getItem(productName));\n        let removed = auxProducts[index];\n        removed.inCart = false;\n        removed.total = 0;\n        removed.count = 0;\n\n        let newCart = new PriorityQueue();\n        newCart.heap = tempCart;\n\n\n        this.setState(() => {\n            return {shoppingCart: newCart, products: [...auxProducts]}\n        });\n\n    };\n\n    //clearCart: Limpia por completo el carrito.\n    clearCart = () => {\n        this.setState(\n            () => {\n                return {shoppingCart: new PriorityQueue()};\n            },\n            () => {\n                this.setProducts();\n                this.calculateTotal();\n            }\n        );\n    };\n\n    //calculateTotal: calcula el subtotal, los impuestos y el total de los productos añadidos al carrito.\n    calculateTotal = () => {\n        let subTotal = 0;\n        this.state.shoppingCart.heap.map(item => (subTotal += item[0].total));\n        const tempTax = subTotal * 0.19;\n        const tax = parseFloat(tempTax.toFixed(2));\n        const total = subTotal + tax;\n        this.setState(() => {\n            return{cartSubTotal: subTotal, cartTax: tax, cartTotal: total};\n        });\n    };\n\n    render() {\n        return(\n            <ProductContext.Provider value={{\n                ...this.state,\n                setFirstName: this.setFirstName,\n                setLastName: this.setLastName,\n                setEmail: this.setEmail,\n                setPassword:this.setPassword,\n                register: this.register,\n                addToCart: this.addToCart,\n                handleDetail: this.handleDetail,\n                search: this.search,\n                getSearch: this.getSearch,\n                setSearch: this.setSearch,\n                clearSearch: this.clearSearch,\n                openProductPreview: this.openProductPreview,\n                closeProductPreview: this.closeProductPreview,\n                addQuantity: this.addQuantity,\n                decreaseQuantity: this.decreaseQuantity,\n                removeItem: this.removeItem,\n                clearCart: this.clearCart\n            }}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }\n}\n\nconst ProductConsumer = ProductContext.Consumer;\n\n\nexport {ProductProvider, ProductConsumer};"]},"metadata":{},"sourceType":"module"}
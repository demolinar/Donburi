{"ast":null,"code":"var _jsxFileName = \"/home/sebastian/Downloads/Donburi-master/src/Context.js\";\n\n/* Context.js: Maneja la actualización de los Detalles de los producto, así como la actualización de los precios y totales del carrito de compras.\n       ProductProvider: Contiene el estado (state) de los datos del programa, asi como las funciones de actualización.\n           getItem: Busca un producto en específico en la lista state.products, la cual permite que no se modifiquen los datos en el ArrayList original de productos.\n           addToCar: Añade un producto al carrito de compras.\n           openProductPreview: Cambia el valor de verdad de productPreviewOpen, la cual activa la vista de detalles del producto recién añadido al carrito.\n           closeProductPreview: Cambia el valor de verdad de productPreviewOpen, la cual desactiva la vista de detalles del producto recién añadido al carrito.\n           addQuantity: Aumenta la cantidad de un mismo producto dentro del carrito de compras.\n           decreaseQuantity: Disminuye la cantidad de un mismo producto dentro del carrito de compras.\n           removeItem: Remueve un producto en específico del carrito.\n           clearCart: Limpia por completo el carrito.\n           calculateTotal: calcula el subtotal, los impuestos y el total de los productos añadidos al carrito.\n*/\nimport React, { Component } from \"react\";\nimport product_array_list from \"./components/ProgramDrivers/ProductArrayListDriver\";\nimport product_linked_list from \"./components/ProgramDrivers/ProductLinkedListDriver\";\nimport PriorityQueue from \"./components/DataStructures/PriorityQueue\";\nimport Queue from \"./components/DataStructures/Queue\"; //import product_tree from \"./components/ProgramDrivers/ProductTreeDriver\";\n\nconst productDetails = {\n  productName: \"Sushi\",\n  productCode: \"Ab0303\",\n  productPrice: 21000,\n  img: \"://0\",\n  inCart: false,\n  details: \"Utamur hendrerit cu est. Nihil torquatos qui ut. Mollis malorum perfecto vix ne. \" + \"Quo id tritani discere dolores, noster eirmod ancillae an sea, ut cum debet delenit accusamus. \" + \"Duo ex oporteat imperdiet urbanitas.\"\n};\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      productsLinked: product_linked_list,\n      //productsTree: product_tree,\n      productDetails: productDetails,\n      shoppingCartQueue: new Queue(),\n      shoppingCart: new PriorityQueue(),\n      productPreviewOpen: false,\n      productPreviewModel: productDetails,\n      cartSubTotal: 0,\n      cartTax: 0,\n      cartTotal: 0\n    };\n\n    this.setProducts = () => {\n      let products = [];\n      product_array_list.array.forEach(item => {\n        const singleItem = { ...item\n        };\n        products = [...products, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: products\n        };\n      });\n    };\n\n    this.getItem = productName => {\n      const product = this.state.products.find(item => item.productName === productName);\n      return product;\n    };\n\n    this.handleDetail = productName => {\n      const product = this.getItem(productName);\n      this.setState(() => {\n        return {\n          productDetails: product\n        };\n      });\n    };\n\n    this.addToCart = productName => {\n      let auxProducts = [...this.state.products];\n      const index = auxProducts.indexOf(this.getItem(productName));\n      const product = auxProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      const price = product.productPrice;\n      product.total = price;\n      this.state.shoppingCart.insert(product);\n      this.state.shoppingCartQueue.enqueue(product);\n      this.setState(() => {\n        return {\n          products: auxProducts,\n          shoppingCar: this.state.shoppingCart,\n          shopṕíngCartQueue: this.state.shoppingCartQueue\n        };\n      }, () => {\n        this.calculateTotal();\n      });\n    };\n\n    this.openProductPreview = productName => {\n      const product = this.getItem(productName);\n      this.setState(() => {\n        return {\n          productPreviewModel: product,\n          productPreviewOpen: true\n        };\n      });\n    };\n\n    this.closeProductPreview = () => {\n      this.setState(() => {\n        return {\n          productPreviewOpen: false\n        };\n      });\n    };\n\n    this.addQuantity = productName => {\n      let tempCart = this.state.shoppingCart;\n      let tempCart1 = this.state.shoppingCartQueue;\n      const selectedProduct = tempCart.heap.find(item => item[0].productName === productName);\n      const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n      const index = tempCart.heap.indexOf(selectedProduct);\n      const product = tempCart.heap[index];\n      const index1 = tempCart1.heap.indexOf(selectedProduct1);\n      const product1 = tempCart1.heap[index1];\n      product[0].count++;\n      product[0].total = product[0].count * product[0].productPrice;\n      product1.count++;\n      product1.total = product1.count * product1.productPrice;\n      this.setState(() => {\n        return {\n          shoppingCart: tempCart,\n          shoppingCartQueue: tempCart1\n        };\n      }, () => {\n        this.calculateTotal();\n      });\n    };\n\n    this.decreaseQuantity = productName => {\n      let tempCart = this.state.shoppingCart;\n      let tempCart1 = this.state.shoppingCartQueue;\n      const selectedProduct = tempCart.heap.find(item => item[0].productName === productName);\n      const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n      const index = tempCart.heap.indexOf(selectedProduct);\n      const product = tempCart.heap[index];\n      const index1 = tempCart1.heap.indexOf(selectedProduct1);\n      const product1 = tempCart1.heap[index1];\n\n      if (product[0].count === 0) {\n        product[0].count = 0;\n      } else {\n        product[0].count = product[0].count - 1;\n        product[0].total = product[0].count * product[0].productPrice;\n        this.setState(() => {\n          return {\n            shoppingCart: tempCart\n          };\n        }, () => {\n          this.calculateTotal();\n        });\n      }\n\n      if (product1.count === 0) {\n        product1.count = 0;\n      } else {\n        product1.count = product1.count - 1;\n        product1.total = product1.count * product1.productPrice;\n        this.setState(() => {\n          return {\n            shoppingCartQueue: tempCart1\n          };\n        }, () => {\n          this.calculateTotal();\n        });\n      }\n    };\n\n    this.removeItem = productName => {\n      let auxProducts = [...this.state.products];\n      let tempCart = this.state.shoppingCart;\n      tempCart = tempCart.heap.filter(item => item[0].productName !== productName);\n      const index = auxProducts.indexOf(this.getItem(productName));\n      let removed = auxProducts[index];\n      removed.inCart = false;\n      removed.total = 0;\n      removed.count = 0;\n      let newCart = new PriorityQueue();\n      newCart.heap = tempCart;\n      this.setState(() => {\n        return {\n          shoppingCart: newCart,\n          products: [...auxProducts]\n        };\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          shoppingCart: new PriorityQueue()\n        };\n      }, () => {\n        this.setProducts();\n        this.calculateTotal();\n      });\n    };\n\n    this.calculateTotal = () => {\n      let subTotal = 0;\n      this.state.shoppingCart.heap.map(item => subTotal += item[0].total);\n      const tempTax = subTotal * 0.19;\n      const tax = parseFloat(tempTax.toFixed(2));\n      const total = subTotal + tax;\n      this.setState(() => {\n        return {\n          cartSubTotal: subTotal,\n          cartTax: tax,\n          cartTotal: total\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setProducts();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        addToCart: this.addToCart,\n        handleDetail: this.handleDetail,\n        openProductPreview: this.openProductPreview,\n        closeProductPreview: this.closeProductPreview,\n        addQuantity: this.addQuantity,\n        decreaseQuantity: this.decreaseQuantity,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/Context.js"],"names":["React","Component","product_array_list","product_linked_list","PriorityQueue","Queue","productDetails","productName","productCode","productPrice","img","inCart","details","ProductContext","createContext","ProductProvider","state","products","productsLinked","shoppingCartQueue","shoppingCart","productPreviewOpen","productPreviewModel","cartSubTotal","cartTax","cartTotal","setProducts","array","forEach","item","singleItem","setState","getItem","product","find","handleDetail","addToCart","auxProducts","index","indexOf","count","price","total","insert","enqueue","shoppingCar","shopṕíngCartQueue","calculateTotal","openProductPreview","closeProductPreview","addQuantity","tempCart","tempCart1","selectedProduct","heap","selectedProduct1","index1","product1","decreaseQuantity","removeItem","filter","removed","newCart","clearCart","subTotal","map","tempTax","tax","parseFloat","toFixed","componentDidMount","render","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["/* Context.js: Maneja la actualización de los Detalles de los producto, así como la actualización de los precios y totales del carrito de compras.\n       ProductProvider: Contiene el estado (state) de los datos del programa, asi como las funciones de actualización.\n           getItem: Busca un producto en específico en la lista state.products, la cual permite que no se modifiquen los datos en el ArrayList original de productos.\n           addToCar: Añade un producto al carrito de compras.\n           openProductPreview: Cambia el valor de verdad de productPreviewOpen, la cual activa la vista de detalles del producto recién añadido al carrito.\n           closeProductPreview: Cambia el valor de verdad de productPreviewOpen, la cual desactiva la vista de detalles del producto recién añadido al carrito.\n           addQuantity: Aumenta la cantidad de un mismo producto dentro del carrito de compras.\n           decreaseQuantity: Disminuye la cantidad de un mismo producto dentro del carrito de compras.\n           removeItem: Remueve un producto en específico del carrito.\n           clearCart: Limpia por completo el carrito.\n           calculateTotal: calcula el subtotal, los impuestos y el total de los productos añadidos al carrito.\n*/\n\nimport React, {Component} from \"react\";\nimport product_array_list from \"./components/ProgramDrivers/ProductArrayListDriver\";\nimport product_linked_list from \"./components/ProgramDrivers/ProductLinkedListDriver\";\nimport PriorityQueue from \"./components/DataStructures/PriorityQueue\";\nimport Queue from \"./components/DataStructures/Queue\";\n//import product_tree from \"./components/ProgramDrivers/ProductTreeDriver\";\n\nconst productDetails = {\n    productName: \"Sushi\",\n    productCode: \"Ab0303\",\n    productPrice: 21000,\n    img: \"://0\",\n    inCart: false,\n    details: \"Utamur hendrerit cu est. Nihil torquatos qui ut. Mollis malorum perfecto vix ne. \" +\n        \"Quo id tritani discere dolores, noster eirmod ancillae an sea, ut cum debet delenit accusamus. \" +\n        \"Duo ex oporteat imperdiet urbanitas.\"\n}\n\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends Component{\n    state = {\n        products: [],\n        productsLinked: product_linked_list,\n        //productsTree: product_tree,\n        productDetails: productDetails,\n        shoppingCartQueue: new Queue(),\n        shoppingCart: new PriorityQueue(),\n        productPreviewOpen: false,\n        productPreviewModel: productDetails,\n        cartSubTotal: 0,\n        cartTax: 0,\n        cartTotal: 0\n    };\n\n    componentDidMount() {\n        this.setProducts();\n    };\n\n    setProducts = () => {\n        let products = [];\n        product_array_list.array.forEach(item => {\n            const singleItem = {...item};\n            products = [...products, singleItem];\n        })\n\n        this.setState(()=>{\n            return {products:products};\n        });\n    };\n\n    getItem = productName => {\n        const product = this.state.products.find(item => item.productName === productName);\n        return product;\n    };\n\n    handleDetail = productName => {\n        const product = this.getItem(productName);\n        this.setState(() => {\n            return {productDetails:product};\n        });\n    };\n\n    addToCart = productName => {\n        let auxProducts = [...this.state.products];\n        const index = auxProducts.indexOf(this.getItem(productName));\n        const product = auxProducts[index];\n\n        product.inCart = true;\n        product.count = 1;\n        const price = product.productPrice;\n        product.total = price;\n\n        this.state.shoppingCart.insert(product);\n        this.state.shoppingCartQueue.enqueue(product);\n\n        this.setState(() => {\n            return {products: auxProducts, shoppingCar: this.state.shoppingCart, shopṕíngCartQueue: this.state.shoppingCartQueue};\n        },() => {\n            this.calculateTotal();\n        });\n    };\n\n    openProductPreview = productName => {\n        const product = this.getItem(productName);\n        this.setState(() => {\n            return {productPreviewModel: product, productPreviewOpen: true};\n        });\n    };\n\n    closeProductPreview = () => {\n        this.setState(() => {\n            return {productPreviewOpen: false};\n        });\n    };\n\n    addQuantity = productName => {\n        let tempCart = this.state.shoppingCart;\n        let tempCart1 = this.state.shoppingCartQueue;\n\n        const selectedProduct = tempCart.heap.find(item => item[0].productName === productName);\n        const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n        const index = tempCart.heap.indexOf(selectedProduct);\n        const product = tempCart.heap[index];\n        const index1 = tempCart1.heap.indexOf(selectedProduct1)\n        const product1 = tempCart1.heap[index1];\n\n        product[0].count++;\n        product[0].total = product[0].count * product[0].productPrice;\n        product1.count++;\n        product1.total = product1.count * product1.productPrice;\n\n        this.setState(() => {\n            return{shoppingCart: tempCart, shoppingCartQueue: tempCart1};\n        }, () => {\n            this.calculateTotal();\n        });\n    };\n\n    decreaseQuantity = productName => {\n        let tempCart = this.state.shoppingCart;\n        let tempCart1 = this.state.shoppingCartQueue;\n\n        const selectedProduct = tempCart.heap.find(item => item[0].productName === productName);\n        const selectedProduct1 = tempCart1.heap.find(item => item.productName === productName);\n\n        const index = tempCart.heap.indexOf(selectedProduct);\n        const product = tempCart.heap[index];\n        const index1 = tempCart1.heap.indexOf(selectedProduct1)\n        const product1 = tempCart1.heap[index1];\n\n        if (product[0].count === 0){\n            product[0].count = 0;\n        } else {\n            product[0].count = product[0].count - 1;\n            product[0].total = product[0].count * product[0].productPrice;\n            this.setState(() => {\n                return{shoppingCart: tempCart};\n            }, () => {\n                this.calculateTotal();\n            });\n        }\n\n        if (product1.count === 0){\n            product1.count = 0;\n        } else {\n            product1.count = product1.count - 1;\n            product1.total = product1.count * product1.productPrice;\n            this.setState(() => {\n                return{shoppingCartQueue: tempCart1};\n            }, () => {\n                this.calculateTotal();\n            });\n        }\n    };\n\n    removeItem = productName => {\n        let auxProducts = [...this.state.products];\n        let tempCart = this.state.shoppingCart;\n        tempCart = tempCart.heap.filter(item => item[0].productName !== productName);\n\n        const index = auxProducts.indexOf(this.getItem(productName));\n        let removed = auxProducts[index];\n        removed.inCart = false;\n        removed.total = 0;\n        removed.count = 0;\n\n        let newCart = new PriorityQueue();\n        newCart.heap = tempCart;\n\n\n        this.setState(() => {\n            return {shoppingCart: newCart, products: [...auxProducts]}\n        });\n\n    };\n\n    clearCart = () => {\n        this.setState(\n            () => {\n                return {shoppingCart: new PriorityQueue()};\n            },\n            () => {\n                this.setProducts();\n                this.calculateTotal();\n            }\n        );\n    };\n\n    calculateTotal = () => {\n        let subTotal = 0;\n        this.state.shoppingCart.heap.map(item => (subTotal += item[0].total));\n        const tempTax = subTotal * 0.19;\n        const tax = parseFloat(tempTax.toFixed(2));\n        const total = subTotal + tax;\n        this.setState(() => {\n            return{cartSubTotal: subTotal, cartTax: tax, cartTotal: total};\n        });\n    };\n\n    render() {\n        return(\n            <ProductContext.Provider value={{\n                ...this.state,\n                addToCart: this.addToCart,\n                handleDetail: this.handleDetail,\n                openProductPreview: this.openProductPreview,\n                closeProductPreview: this.closeProductPreview,\n                addQuantity: this.addQuantity,\n                decreaseQuantity: this.decreaseQuantity,\n                removeItem: this.removeItem,\n                clearCart: this.clearCart\n            }}>\n                {this.props.children}\n            </ProductContext.Provider>\n        );\n    }\n}\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport {ProductProvider, ProductConsumer};"]},"metadata":{},"sourceType":"module"}
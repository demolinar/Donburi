{"ast":null,"code":"class Node {\n  constructor(key, data) {\n    this.key = key;\n    this.data = data;\n    this.left = this.right = null;\n  }\n\n}\n\nclass BST {\n  constructor() {\n    this.root = null;\n    this.array = [];\n  }\n\n  minValue(node) {\n    let current = node;\n\n    while (current && current.left != null) {\n      current = current.left;\n    }\n\n    return current;\n  }\n\n  maxValue(node) {\n    let current = node;\n\n    while (current && current.right != null) {\n      current = current.right;\n    }\n\n    return current;\n  }\n\n  delete(data) {\n    this.root = this.removeNode(this.root, data);\n  }\n\n  removeNode(node, key) {\n    if (node === null) return null;else if (key < node.key) {\n      node.left = this.removeNode(node.left, key);\n      return node;\n    } else if (key > node.key) {\n      node.right = this.removeNode(node.right, key);\n      return node;\n    } else {\n      if (node.left === null && node.right === null) {\n        node = null;\n        return node;\n      }\n\n      if (node.left === null) {\n        node = node.right;\n        return node;\n      } else if (node.right === null) {\n        node = node.left;\n        return node;\n      }\n\n      let aux = this.minValue(node.right);\n      node.data = aux.data;\n      node.key = aux.key;\n      node.right = this.removeNode(node.right, aux.key);\n      return node;\n    }\n  }\n\n  insert(key, data) {\n    let newNode = new Node(key, data);\n    if (this.root === null) this.root = newNode;else this.insertNode(this.root, newNode);\n  }\n\n  insertNode(node, newNode) {\n    if (newNode.key < node.key) {\n      if (node.left === null) node.left = newNode;else this.insertNode(node.left, newNode);\n    } else {\n      if (node.right === null) node.right = newNode;else this.insertNode(node.right, newNode);\n    }\n  }\n\n  inorder(root) {\n    if (!root) {\n      return;\n    }\n\n    this.inorder(root.left);\n    console.log(root.data);\n    this.inorder(root.right);\n  }\n\n  search(node, data) {\n    if (node === null) return null;else if (data < node.data) return this.search(node.left, data);else if (data > node.data) return this.search(node.right, data);else return node;\n  }\n\n  toArray(node) {\n    if (node == null) return;\n\n    if (node.left != null) {\n      this.array.push(this.toArray(node.left));\n    }\n\n    if (node.right != null) {\n      this.array.push(this.toArray(node.right));\n    }\n\n    this.array.push(node.data);\n    return this.array;\n  }\n\n}\n\nlet tree = new BST();\ntree.insert(3, 3);\ntree.insert(2, 2);\ntree.insert(0, 0);\ntree.insert(9, 9);\nconsole.log(tree.toArray(tree.root));\nexport default BST;","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/components/DataStructures/BST.js"],"names":["Node","constructor","key","data","left","right","BST","root","array","minValue","node","current","maxValue","delete","removeNode","aux","insert","newNode","insertNode","inorder","console","log","search","toArray","push","tree"],"mappings":"AACA,MAAMA,IAAN,CAAU;AAENC,EAAAA,WAAW,CAACC,GAAD,EAAMC,IAAN,EAAY;AACnB,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAY,KAAKC,KAAL,GAAa,IAAzB;AACH;;AANK;;AAUV,MAAMC,GAAN,CAAU;AAENL,EAAAA,WAAW,GAAG;AACV,SAAKM,IAAL,GAAY,IAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACH;;AAEDC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACX,QAAIC,OAAO,GAAGD,IAAd;;AACA,WAAOC,OAAO,IAAIA,OAAO,CAACP,IAAR,IAAgB,IAAlC,EAAuC;AACnCO,MAAAA,OAAO,GAAGA,OAAO,CAACP,IAAlB;AACH;;AACD,WAAOO,OAAP;AACH;;AAEDC,EAAAA,QAAQ,CAACF,IAAD,EAAO;AACX,QAAIC,OAAO,GAAGD,IAAd;;AACA,WAAOC,OAAO,IAAIA,OAAO,CAACN,KAAR,IAAiB,IAAnC,EAAwC;AACpCM,MAAAA,OAAO,GAAGA,OAAO,CAACN,KAAlB;AACH;;AACD,WAAOM,OAAP;AACH;;AAEDE,EAAAA,MAAM,CAACV,IAAD,EAAO;AACT,SAAKI,IAAL,GAAY,KAAKO,UAAL,CAAgB,KAAKP,IAArB,EAA2BJ,IAA3B,CAAZ;AACH;;AAEDW,EAAAA,UAAU,CAACJ,IAAD,EAAOR,GAAP,EAAY;AAElB,QAAGQ,IAAI,KAAK,IAAZ,EACI,OAAO,IAAP,CADJ,KAEK,IAAGR,GAAG,GAACQ,IAAI,CAACR,GAAZ,EAAiB;AAClBQ,MAAAA,IAAI,CAACN,IAAL,GAAY,KAAKU,UAAL,CAAgBJ,IAAI,CAACN,IAArB,EAA2BF,GAA3B,CAAZ;AACA,aAAOQ,IAAP;AACH,KAHI,MAGE,IAAGR,GAAG,GAACQ,IAAI,CAACR,GAAZ,EAAiB;AACpBQ,MAAAA,IAAI,CAACL,KAAL,GAAa,KAAKS,UAAL,CAAgBJ,IAAI,CAACL,KAArB,EAA4BH,GAA5B,CAAb;AACA,aAAOQ,IAAP;AACH,KAHM,MAGA;AACH,UAAGA,IAAI,CAACN,IAAL,KAAc,IAAd,IAAsBM,IAAI,CAACL,KAAL,KAAe,IAAxC,EAA8C;AAC1CK,QAAAA,IAAI,GAAG,IAAP;AACA,eAAOA,IAAP;AACH;;AACD,UAAGA,IAAI,CAACN,IAAL,KAAc,IAAjB,EAAuB;AACnBM,QAAAA,IAAI,GAAGA,IAAI,CAACL,KAAZ;AACA,eAAOK,IAAP;AACH,OAHD,MAGO,IAAGA,IAAI,CAACL,KAAL,KAAe,IAAlB,EAAwB;AAC3BK,QAAAA,IAAI,GAAGA,IAAI,CAACN,IAAZ;AACA,eAAOM,IAAP;AACH;;AAED,UAAIK,GAAG,GAAG,KAAKN,QAAL,CAAcC,IAAI,CAACL,KAAnB,CAAV;AACAK,MAAAA,IAAI,CAACP,IAAL,GAAYY,GAAG,CAACZ,IAAhB;AACAO,MAAAA,IAAI,CAACR,GAAL,GAAWa,GAAG,CAACb,GAAf;AAEAQ,MAAAA,IAAI,CAACL,KAAL,GAAa,KAAKS,UAAL,CAAgBJ,IAAI,CAACL,KAArB,EAA4BU,GAAG,CAACb,GAAhC,CAAb;AACA,aAAOQ,IAAP;AACH;AAEJ;;AAEDM,EAAAA,MAAM,CAACd,GAAD,EAAMC,IAAN,EAAY;AACd,QAAIc,OAAO,GAAG,IAAIjB,IAAJ,CAASE,GAAT,EAAcC,IAAd,CAAd;AAEA,QAAG,KAAKI,IAAL,KAAc,IAAjB,EACI,KAAKA,IAAL,GAAYU,OAAZ,CADJ,KAGI,KAAKC,UAAL,CAAgB,KAAKX,IAArB,EAA2BU,OAA3B;AACP;;AAEDC,EAAAA,UAAU,CAACR,IAAD,EAAOO,OAAP,EAAgB;AACtB,QAAGA,OAAO,CAACf,GAAR,GAAYQ,IAAI,CAACR,GAApB,EAAyB;AACrB,UAAGQ,IAAI,CAACN,IAAL,KAAc,IAAjB,EACIM,IAAI,CAACN,IAAL,GAAYa,OAAZ,CADJ,KAGI,KAAKC,UAAL,CAAgBR,IAAI,CAACN,IAArB,EAA2Ba,OAA3B;AACP,KALD,MAKO;AACH,UAAGP,IAAI,CAACL,KAAL,KAAe,IAAlB,EACIK,IAAI,CAACL,KAAL,GAAaY,OAAb,CADJ,KAGI,KAAKC,UAAL,CAAgBR,IAAI,CAACL,KAArB,EAA2BY,OAA3B;AACP;AACJ;;AAEDE,EAAAA,OAAO,CAACZ,IAAD,EAAO;AACV,QAAI,CAACA,IAAL,EAAW;AACP;AACH;;AACD,SAAKY,OAAL,CAAaZ,IAAI,CAACH,IAAlB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYd,IAAI,CAACJ,IAAjB;AACA,SAAKgB,OAAL,CAAaZ,IAAI,CAACF,KAAlB;AACH;;AAEDiB,EAAAA,MAAM,CAACZ,IAAD,EAAOP,IAAP,EAAa;AACf,QAAGO,IAAI,KAAK,IAAZ,EACI,OAAO,IAAP,CADJ,KAEK,IAAGP,IAAI,GAAGO,IAAI,CAACP,IAAf,EACD,OAAO,KAAKmB,MAAL,CAAYZ,IAAI,CAACN,IAAjB,EAAuBD,IAAvB,CAAP,CADC,KAEA,IAAGA,IAAI,GAAGO,IAAI,CAACP,IAAf,EACD,OAAO,KAAKmB,MAAL,CAAYZ,IAAI,CAACL,KAAjB,EAAwBF,IAAxB,CAAP,CADC,KAGD,OAAOO,IAAP;AACP;;AAEDa,EAAAA,OAAO,CAACb,IAAD,EAAO;AACV,QAAIA,IAAI,IAAI,IAAZ,EACI;;AACJ,QAAIA,IAAI,CAACN,IAAL,IAAa,IAAjB,EAAuB;AACnB,WAAKI,KAAL,CAAWgB,IAAX,CAAgB,KAAKD,OAAL,CAAab,IAAI,CAACN,IAAlB,CAAhB;AACH;;AACD,QAAIM,IAAI,CAACL,KAAL,IAAc,IAAlB,EAAwB;AACpB,WAAKG,KAAL,CAAWgB,IAAX,CAAgB,KAAKD,OAAL,CAAab,IAAI,CAACL,KAAlB,CAAhB;AACH;;AACD,SAAKG,KAAL,CAAWgB,IAAX,CAAgBd,IAAI,CAACP,IAArB;AACA,WAAO,KAAKK,KAAZ;AACH;;AAlHK;;AAsHV,IAAIiB,IAAI,GAAG,IAAInB,GAAJ,EAAX;AACAmB,IAAI,CAACT,MAAL,CAAY,CAAZ,EAAc,CAAd;AACAS,IAAI,CAACT,MAAL,CAAY,CAAZ,EAAc,CAAd;AACAS,IAAI,CAACT,MAAL,CAAY,CAAZ,EAAc,CAAd;AACAS,IAAI,CAACT,MAAL,CAAY,CAAZ,EAAc,CAAd;AACAI,OAAO,CAACC,GAAR,CAAYI,IAAI,CAACF,OAAL,CAAaE,IAAI,CAAClB,IAAlB,CAAZ;AAEA,eAAeD,GAAf","sourcesContent":["\nclass Node{\n\n    constructor(key, data) {\n        this.key = key;\n        this.data = data;\n        this.left = this.right = null;\n    }\n\n}\n\nclass BST {\n\n    constructor() {\n        this.root = null;\n        this.array = [];\n    }\n\n    minValue(node) {\n        let current = node;\n        while (current && current.left != null){\n            current = current.left;\n        }\n        return current;\n    }\n\n    maxValue(node) {\n        let current = node;\n        while (current && current.right != null){\n            current = current.right;\n        }\n        return current;\n    }\n\n    delete(data) {\n        this.root = this.removeNode(this.root, data);\n    }\n\n    removeNode(node, key) {\n\n        if(node === null)\n            return null;\n        else if(key<node.key) {\n            node.left = this.removeNode(node.left, key);\n            return node;\n        } else if(key>node.key) {\n            node.right = this.removeNode(node.right, key);\n            return node;\n        } else {\n            if(node.left === null && node.right === null) {\n                node = null;\n                return node;\n            }\n            if(node.left === null) {\n                node = node.right;\n                return node;\n            } else if(node.right === null) {\n                node = node.left;\n                return node;\n            }\n\n            let aux = this.minValue(node.right);\n            node.data = aux.data;\n            node.key = aux.key;\n\n            node.right = this.removeNode(node.right, aux.key);\n            return node;\n        }\n\n    }\n\n    insert(key, data) {\n        let newNode = new Node(key, data);\n\n        if(this.root === null)\n            this.root = newNode;\n        else\n            this.insertNode(this.root, newNode);\n    }\n\n    insertNode(node, newNode) {\n        if(newNode.key<node.key) {\n            if(node.left === null)\n                node.left = newNode;\n            else\n                this.insertNode(node.left, newNode);\n        } else {\n            if(node.right === null)\n                node.right = newNode;\n            else\n                this.insertNode(node.right,newNode);\n        }\n    }\n\n    inorder(root) {\n        if (!root) {\n            return;\n        }\n        this.inorder(root.left);\n        console.log(root.data);\n        this.inorder(root.right);\n    }\n\n    search(node, data) {\n        if(node === null)\n            return null;\n        else if(data < node.data)\n            return this.search(node.left, data);\n        else if(data > node.data)\n            return this.search(node.right, data);\n        else\n            return node;\n    }\n\n    toArray(node) {\n        if (node == null)\n            return;\n        if (node.left != null) {\n            this.array.push(this.toArray(node.left));\n        }\n        if (node.right != null) {\n            this.array.push(this.toArray(node.right));\n        }\n        this.array.push(node.data);\n        return this.array;\n    }\n\n}\n\nlet tree = new BST();\ntree.insert(3,3);\ntree.insert(2,2);\ntree.insert(0,0);\ntree.insert(9,9);\nconsole.log(tree.toArray(tree.root));\n\nexport default BST;"]},"metadata":{},"sourceType":"module"}
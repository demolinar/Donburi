{"ast":null,"code":"import Node from \"./Node\";\n\nclass Tree {\n  constructor() {\n    this.root = new Node();\n  }\n\n  insert(category, data) {\n    category.children.push(new Node(data));\n  }\n\n  shallowEqual(object1, object2) {\n    return {\n      object1\n    } === {\n      object2\n    };\n  }\n\n  find(id) {\n    if (this.root.val.productName === id) return true;\n    let temp = [];\n    temp.push(this.root.children);\n\n    for (let i = 0; i < temp.length; i++) {\n      for (let j = 0; j < temp[i].length; j++) {\n        if (this.shallowEqual(temp[i][j].val.productName, id)) {\n          return true;\n        }\n\n        temp.push(temp[i][j].children);\n      }\n    }\n\n    return false;\n  }\n\n  remove(list, object) {\n    for (let i = 0; i < list.length; i++) {\n      if (this.shallowEqual(list[i], object)) {\n        list.splice(i, 1);\n      }\n    }\n  }\n\n}\n\nexport default Tree;","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/components/DataStructures/Tree.js"],"names":["Node","Tree","constructor","root","insert","category","data","children","push","shallowEqual","object1","object2","find","id","val","productName","temp","i","length","j","remove","list","object","splice"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,GAAG;AACV,SAAKC,IAAL,GAAY,IAAIH,IAAJ,EAAZ;AACH;;AAEDI,EAAAA,MAAM,CAACC,QAAD,EAAWC,IAAX,EAAiB;AACnBD,IAAAA,QAAQ,CAACE,QAAT,CAAkBC,IAAlB,CAAuB,IAAIR,IAAJ,CAASM,IAAT,CAAvB;AACH;;AAEDG,EAAAA,YAAY,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAC3B,WAAO;AAACD,MAAAA;AAAD,UAAc;AAACC,MAAAA;AAAD,KAArB;AACH;;AAEDC,EAAAA,IAAI,CAACC,EAAD,EAAK;AACL,QAAI,KAAKV,IAAL,CAAUW,GAAV,CAAcC,WAAd,KAA8BF,EAAlC,EACI,OAAO,IAAP;AACJ,QAAIG,IAAI,GAAG,EAAX;AACAA,IAAAA,IAAI,CAACR,IAAL,CAAU,KAAKL,IAAL,CAAUI,QAApB;;AACA,SAAK,IAAIU,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,IAAI,CAACE,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAC9B,WAAK,IAAIE,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACH,IAAI,CAACC,CAAD,CAAJ,CAAQC,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACjC,YAAI,KAAKV,YAAL,CAAkBO,IAAI,CAACC,CAAD,CAAJ,CAAQE,CAAR,EAAWL,GAAX,CAAeC,WAAjC,EAA8CF,EAA9C,CAAJ,EAAuD;AACnD,iBAAO,IAAP;AACH;;AACDG,QAAAA,IAAI,CAACR,IAAL,CAAUQ,IAAI,CAACC,CAAD,CAAJ,CAAQE,CAAR,EAAWZ,QAArB;AACH;AACJ;;AACD,WAAO,KAAP;AACH;;AAEDa,EAAAA,MAAM,CAACC,IAAD,EAAOC,MAAP,EAAe;AACjB,SAAK,IAAIL,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACI,IAAI,CAACH,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAC9B,UAAI,KAAKR,YAAL,CAAkBY,IAAI,CAACJ,CAAD,CAAtB,EAA2BK,MAA3B,CAAJ,EAAwC;AACpCD,QAAAA,IAAI,CAACE,MAAL,CAAYN,CAAZ,EAAe,CAAf;AACH;AACJ;AACJ;;AAnCM;;AAsCX,eAAehB,IAAf","sourcesContent":["import Node from \"./Node\";\n\nclass Tree {\n    constructor() {\n        this.root = new Node();\n    }\n\n    insert(category, data) {\n        category.children.push(new Node(data));\n    }\n\n    shallowEqual(object1, object2) {\n        return {object1} === {object2};\n    }\n\n    find(id) {\n        if (this.root.val.productName === id)\n            return true;\n        let temp = [];\n        temp.push(this.root.children);\n        for (let i=0; i<temp.length; i++) {\n            for (let j=0; j<temp[i].length; j++) {\n                if (this.shallowEqual(temp[i][j].val.productName, id)) {\n                    return true;\n                }\n                temp.push(temp[i][j].children);\n            }\n        }\n        return false;\n    }\n\n    remove(list, object) {\n        for (let i=0; i<list.length; i++) {\n            if (this.shallowEqual(list[i], object)) {\n                list.splice(i, 1);\n            }\n        }\n    }\n}\n\nexport default Tree;"]},"metadata":{},"sourceType":"module"}
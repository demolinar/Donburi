{"ast":null,"code":"class Node {\n  constructor(value) {\n    this.data = value;\n    this.left = this.right = null;\n  }\n\n}\n\nclass BST {\n  constructor() {\n    this.root = new Node(\"\");\n  }\n\n  minValue(node) {\n    let current = node;\n\n    while (current && current.left != null) {\n      current = current.left;\n    }\n\n    return current;\n  }\n\n  maxValue(node) {\n    let current = node;\n\n    while (current && current.right != null) {\n      current = current.right;\n    }\n\n    return current;\n  }\n\n  delete(root, key) {\n    if (root == null) {\n      return root;\n    }\n\n    if (key < root.data) {\n      root.left = this.delete(root.left, key);\n    } else if (key > root.data) {\n      root.right = this.delete(root.right, key);\n    } else {\n      if (root.left === null) {\n        return root.right;\n      } else if (root.right == null) {\n        return root.left;\n      }\n\n      root.data = this.minValue(root.right);\n      root.right = this.delete(root.right, root.data);\n    }\n\n    return root;\n  }\n\n  insert(root, value) {\n    if (root === null) {\n      return new Node(value);\n    }\n\n    if (value > root.data) {\n      root.right = this.insert(root.right, value);\n    } else {\n      root.left = this.insert(root.left, value);\n    }\n  }\n\n  inorder(root) {\n    if (!root) {\n      return;\n    }\n\n    this.inorder(root.left);\n    console.log(root.data);\n    this.inorder(root.right);\n  }\n\n  search(root, key) {\n    if (root === null || root.data === key) return root;\n    if (root.data > key) return this.search(root.left, key);\n    return this.search(root.right, key);\n  }\n\n  toArray(node) {\n    let result = [];\n\n    if (node.left != null) {\n      result.push(this.toArray(node.left));\n    }\n\n    if (node.right != null) {\n      result.push(this.toArray(node.right));\n    }\n\n    result.push(node.data);\n    return result;\n  }\n\n}\n\nexport default BST;","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/components/DataStructures/BST.js"],"names":["Node","constructor","value","data","left","right","BST","root","minValue","node","current","maxValue","delete","key","insert","inorder","console","log","search","toArray","result","push"],"mappings":"AAAA,MAAMA,IAAN,CAAU;AAENC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKC,IAAL,GAAYD,KAAZ;AACA,SAAKE,IAAL,GAAY,KAAKC,KAAL,GAAa,IAAzB;AACH;;AALK;;AASV,MAAMC,GAAN,CAAU;AAENL,EAAAA,WAAW,GAAG;AACV,SAAKM,IAAL,GAAY,IAAIP,IAAJ,CAAS,EAAT,CAAZ;AACH;;AAEDQ,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACX,QAAIC,OAAO,GAAGD,IAAd;;AACA,WAAOC,OAAO,IAAIA,OAAO,CAACN,IAAR,IAAgB,IAAlC,EAAuC;AACnCM,MAAAA,OAAO,GAAGA,OAAO,CAACN,IAAlB;AACH;;AACD,WAAOM,OAAP;AACH;;AAEDC,EAAAA,QAAQ,CAACF,IAAD,EAAO;AACX,QAAIC,OAAO,GAAGD,IAAd;;AACA,WAAOC,OAAO,IAAIA,OAAO,CAACL,KAAR,IAAiB,IAAnC,EAAwC;AACpCK,MAAAA,OAAO,GAAGA,OAAO,CAACL,KAAlB;AACH;;AACD,WAAOK,OAAP;AACH;;AAEDE,EAAAA,MAAM,CAACL,IAAD,EAAOM,GAAP,EAAY;AACd,QAAIN,IAAI,IAAI,IAAZ,EAAkB;AACd,aAAOA,IAAP;AACH;;AAED,QAAIM,GAAG,GAAGN,IAAI,CAACJ,IAAf,EAAqB;AACjBI,MAAAA,IAAI,CAACH,IAAL,GAAY,KAAKQ,MAAL,CAAYL,IAAI,CAACH,IAAjB,EAAuBS,GAAvB,CAAZ;AACH,KAFD,MAEO,IAAIA,GAAG,GAAGN,IAAI,CAACJ,IAAf,EAAqB;AACxBI,MAAAA,IAAI,CAACF,KAAL,GAAa,KAAKO,MAAL,CAAYL,IAAI,CAACF,KAAjB,EAAwBQ,GAAxB,CAAb;AACH,KAFM,MAEA;AACH,UAAIN,IAAI,CAACH,IAAL,KAAc,IAAlB,EAAwB;AACpB,eAAOG,IAAI,CAACF,KAAZ;AACH,OAFD,MAEO,IAAIE,IAAI,CAACF,KAAL,IAAc,IAAlB,EAAwB;AAC3B,eAAOE,IAAI,CAACH,IAAZ;AACH;;AACDG,MAAAA,IAAI,CAACJ,IAAL,GAAY,KAAKK,QAAL,CAAcD,IAAI,CAACF,KAAnB,CAAZ;AACAE,MAAAA,IAAI,CAACF,KAAL,GAAa,KAAKO,MAAL,CAAYL,IAAI,CAACF,KAAjB,EAAwBE,IAAI,CAACJ,IAA7B,CAAb;AACH;;AACD,WAAOI,IAAP;AACH;;AAEDO,EAAAA,MAAM,CAACP,IAAD,EAAOL,KAAP,EAAc;AAEhB,QAAIK,IAAI,KAAG,IAAX,EAAiB;AACb,aAAO,IAAIP,IAAJ,CAASE,KAAT,CAAP;AACH;;AACD,QAAIA,KAAK,GAAGK,IAAI,CAACJ,IAAjB,EAAuB;AACnBI,MAAAA,IAAI,CAACF,KAAL,GAAa,KAAKS,MAAL,CAAYP,IAAI,CAACF,KAAjB,EAAwBH,KAAxB,CAAb;AACH,KAFD,MAEO;AACHK,MAAAA,IAAI,CAACH,IAAL,GAAY,KAAKU,MAAL,CAAYP,IAAI,CAACH,IAAjB,EAAuBF,KAAvB,CAAZ;AACH;AACJ;;AAEDa,EAAAA,OAAO,CAACR,IAAD,EAAO;AACV,QAAI,CAACA,IAAL,EAAW;AACP;AACH;;AACD,SAAKQ,OAAL,CAAaR,IAAI,CAACH,IAAlB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYV,IAAI,CAACJ,IAAjB;AACA,SAAKY,OAAL,CAAaR,IAAI,CAACF,KAAlB;AACH;;AAEDa,EAAAA,MAAM,CAACX,IAAD,EAAOM,GAAP,EAAY;AACd,QAAIN,IAAI,KAAG,IAAP,IAAeA,IAAI,CAACJ,IAAL,KAAYU,GAA/B,EACI,OAAON,IAAP;AACJ,QAAIA,IAAI,CAACJ,IAAL,GAAYU,GAAhB,EACI,OAAO,KAAKK,MAAL,CAAYX,IAAI,CAACH,IAAjB,EAAuBS,GAAvB,CAAP;AACJ,WAAO,KAAKK,MAAL,CAAYX,IAAI,CAACF,KAAjB,EAAwBQ,GAAxB,CAAP;AACH;;AAEDM,EAAAA,OAAO,CAACV,IAAD,EAAO;AACV,QAAIW,MAAM,GAAG,EAAb;;AACA,QAAIX,IAAI,CAACL,IAAL,IAAa,IAAjB,EAAuB;AACnBgB,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKF,OAAL,CAAaV,IAAI,CAACL,IAAlB,CAAZ;AACH;;AAED,QAAIK,IAAI,CAACJ,KAAL,IAAc,IAAlB,EAAwB;AACpBe,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKF,OAAL,CAAaV,IAAI,CAACJ,KAAlB,CAAZ;AACH;;AACDe,IAAAA,MAAM,CAACC,IAAP,CAAYZ,IAAI,CAACN,IAAjB;AACA,WAAOiB,MAAP;AACH;;AAnFK;;AAuFV,eAAed,GAAf","sourcesContent":["class Node{\n\n    constructor(value) {\n        this.data = value;\n        this.left = this.right = null;\n    }\n\n}\n\nclass BST {\n\n    constructor() {\n        this.root = new Node(\"\");\n    }\n\n    minValue(node) {\n        let current = node;\n        while (current && current.left != null){\n            current = current.left;\n        }\n        return current;\n    }\n\n    maxValue(node) {\n        let current = node;\n        while (current && current.right != null){\n            current = current.right;\n        }\n        return current;\n    }\n\n    delete(root, key) {\n        if (root == null) {\n            return root;\n        }\n\n        if (key < root.data) {\n            root.left = this.delete(root.left, key);\n        } else if (key > root.data) {\n            root.right = this.delete(root.right, key);\n        } else {\n            if (root.left === null) {\n                return root.right;\n            } else if (root.right == null) {\n                return root.left;\n            }\n            root.data = this.minValue(root.right);\n            root.right = this.delete(root.right, root.data);\n        }\n        return root;\n    }\n\n    insert(root, value) {\n\n        if (root===null) {\n            return new Node(value);\n        }\n        if (value > root.data) {\n            root.right = this.insert(root.right, value);\n        } else {\n            root.left = this.insert(root.left, value);\n        }\n    }\n\n    inorder(root) {\n        if (!root) {\n            return;\n        }\n        this.inorder(root.left);\n        console.log(root.data);\n        this.inorder(root.right);\n    }\n\n    search(root, key) {\n        if (root===null || root.data===key)\n            return root;\n        if (root.data > key)\n            return this.search(root.left, key);\n        return this.search(root.right, key);\n    }\n\n    toArray(node) {\n        let result = [];\n        if (node.left != null) {\n            result.push(this.toArray(node.left));\n        }\n    \n        if (node.right != null) {\n            result.push(this.toArray(node.right));\n        }\n        result.push(node.data);\n        return result;\n    }\n\n}\n\nexport default BST;"]},"metadata":{},"sourceType":"module"}
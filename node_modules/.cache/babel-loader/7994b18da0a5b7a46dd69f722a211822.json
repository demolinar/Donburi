{"ast":null,"code":"import GenericNode from \"./GenericNode\";\n\nclass GenericLinkedList {\n  constructor() {\n    this.head = null;\n    this.size = 0;\n    this.array = [];\n  }\n\n  add(element) {\n    let node = new GenericNode(element);\n    let current;\n    if (this.head == null) this.head = node;else {\n      current = this.head;\n\n      while (current.next) {\n        current = current.next;\n      }\n\n      current.next = node;\n    }\n    this.size++;\n  }\n\n  insertAt(element, index) {\n    if (index > 0 && index > this.size) return false;else {\n      let node = new GenericNode(element);\n      let curr, prev;\n      curr = this.head;\n\n      if (index === 0) {\n        node.next = this.head;\n        this.head = node;\n      } else {\n        curr = this.head;\n        let it = 0;\n\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr.next;\n        } // adding an element\n\n\n        node.next = curr;\n        prev.next = node;\n      }\n\n      this.size++;\n    }\n  }\n\n  removeFrom(index) {\n    if (index > 0 && index > this.size) return -1;else {\n      let curr,\n          prev,\n          it = 0;\n      curr = this.head;\n      prev = curr;\n\n      if (index === 0) {\n        this.head = curr.next;\n      } else {\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr.next;\n        }\n\n        prev.next = curr.next;\n      }\n\n      this.size--;\n      return curr.element;\n    }\n  }\n\n  removeElement(element) {\n    let current = this.head;\n    let prev = null;\n\n    while (current != null) {\n      if (current.element === element) {\n        if (prev == null) {\n          this.head = current.next;\n        } else {\n          prev.next = current.next;\n        }\n\n        this.size--;\n        return current.element;\n      }\n\n      prev = current;\n      current = current.next;\n    }\n\n    return -1;\n  }\n\n  indexOf(element) {\n    let count = 0;\n    let current = this.head;\n\n    while (current != null) {\n      if (current.element === element) return count;\n      count++;\n      current = current.next;\n    }\n\n    return -1;\n  }\n\n  isEmpty() {\n    return this.size === 0;\n  }\n\n  printList() {\n    let curr = this.head;\n    let str = \"\";\n\n    while (curr) {\n      str += curr.element + \" \";\n      curr = curr.next;\n    }\n\n    console.log(str);\n  }\n\n  lookFor(key) {\n    let current = this.head;\n\n    while (current !== null) {\n      if (current.head.productName.localeCompare(key) === 0) return true;\n    }\n\n    return false;\n  }\n\n  pushToArray() {\n    let curr = this.head;\n\n    while (curr !== null) {\n      this.array.push(curr.element);\n      curr = curr.next;\n    }\n  }\n\n}\n\nexport default GenericLinkedList;","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/components/GenericLinkedList.js"],"names":["GenericNode","GenericLinkedList","constructor","head","size","array","add","element","node","current","next","insertAt","index","curr","prev","it","removeFrom","removeElement","indexOf","count","isEmpty","printList","str","console","log","lookFor","key","productName","localeCompare","pushToArray","push"],"mappings":"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","sourcesContent":["import GenericNode from \"./GenericNode\";\n\nclass GenericLinkedList {\n    constructor()\n    {\n        this.head = null;\n        this.size = 0;\n        this.array = []\n    }\n\n    add(element)\n    {\n        let node = new GenericNode(element);\n        let current;\n\n        if (this.head == null)\n            this.head = node;\n        else {\n            current = this.head;\n            while (current.next) {\n                current = current.next;\n            }\n            current.next = node;\n        }\n        this.size++;\n    }\n\n    insertAt(element, index)\n    {\n        if (index > 0 && index > this.size)\n            return false;\n        else {\n            let node = new GenericNode(element);\n            let curr, prev;\n\n            curr = this.head;\n\n            if (index === 0) {\n                node.next = this.head;\n                this.head = node;\n            } else {\n                curr = this.head;\n                let it = 0;\n\n                while (it < index) {\n                    it++;\n                    prev = curr;\n                    curr = curr.next;\n                }\n\n                // adding an element\n                node.next = curr;\n                prev.next = node;\n            }\n            this.size++;\n        }\n    }\n\n    removeFrom(index)\n    {\n        if (index > 0 && index > this.size)\n            return -1;\n        else {\n            let curr, prev, it = 0;\n            curr = this.head;\n            prev = curr;\n\n            if (index === 0) {\n                this.head = curr.next;\n            } else {\n\n                while (it < index) {\n                    it++;\n                    prev = curr;\n                    curr = curr.next;\n                }\n                prev.next = curr.next;\n            }\n            this.size--;\n            return curr.element;\n        }\n    }\n\n    removeElement(element)\n    {\n        let current = this.head;\n        let prev = null;\n\n        while (current != null) {\n\n            if (current.element === element) {\n                if (prev == null) {\n                    this.head = current.next;\n                } else {\n                    prev.next = current.next;\n                }\n                this.size--;\n                return current.element;\n            }\n            prev = current;\n            current = current.next;\n        }\n        return -1;\n    }\n\n    indexOf(element)\n    {\n        let count = 0;\n        let current = this.head;\n\n        while (current != null) {\n            if (current.element === element)\n                return count;\n            count++;\n            current = current.next;\n        }\n        return -1;\n    }\n\n    isEmpty()\n    {\n        return this.size === 0;\n    }\n\n    printList()\n    {\n        let curr = this.head;\n        let str = \"\";\n        while (curr) {\n            str += curr.element + \" \";\n            curr = curr.next;\n        }\n        console.log(str);\n    }\n\n    lookFor(key){\n        let current = this.head;\n        while (current !== null){\n            if (current.head.productName.localeCompare(key) === 0)\n                return true;\n        }\n        return false;\n    }\n\n    pushToArray(){\n        let curr = this.head;\n\n        while (curr !== null) {\n            this.array.push(curr.element);\n            curr = curr.next;\n        }\n    }\n\n}\n\nexport default GenericLinkedList;\n"]},"metadata":{},"sourceType":"module"}
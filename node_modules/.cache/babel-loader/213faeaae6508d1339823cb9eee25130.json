{"ast":null,"code":"class BST {\n  constructor(value) {\n    this.data = value;\n    this.left = this.right = null;\n  }\n\n  minValue(node) {\n    let current = node;\n\n    while (current && current.left != null) {\n      current = current.left;\n    }\n\n    return current;\n  }\n\n  maxValue(node) {\n    let current = node;\n\n    while (current && current.right != null) {\n      current = current.right;\n    }\n\n    return current;\n  }\n\n  delete(root, key) {\n    if (root == null) {\n      return root;\n    }\n\n    if (key < root.data) {\n      root.left = this.delete(root.left, key);\n    } else if (key > root.data) {\n      root.right = this.delete(root.right, key);\n    } else {\n      if (root.left === null) {\n        return root.right;\n      } else if (root.right == null) {\n        return root.left;\n      }\n\n      root.data = this.minValue(root.right);\n      root.right = this.delete(root.right, root.data);\n    }\n\n    return root;\n  }\n\n  insert(root, value) {\n    if (!root) {\n      return new BST(value);\n    }\n\n    if (value > root.data) {\n      root.right = this.insert(root.right, value);\n    } else {\n      root.left = this.insert(root.left, value);\n    }\n\n    return root;\n  }\n\n  inorder(root) {\n    if (!root) {\n      return;\n    }\n\n    this.inorder(root.left);\n    console.log(root.data);\n    this.inorder(root.right);\n  }\n\n  search(root, key) {\n    if (root == null || root.key == key) return root;\n    if (root.data > key) return this.search(root.left, key);\n    return this.search(root.right, key);\n  }\n\n  toArray(node) {\n    let result = [];\n\n    if (node.left != null) {\n      result.push(this.toArray(node.left));\n    }\n\n    if (node.right != null) {\n      result.push(this.toArray(node.right));\n    }\n\n    result.push(node.data);\n    return result;\n  }\n\n}\n\nexport default BST;","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/components/DataStructures/BST.js"],"names":["BST","constructor","value","data","left","right","minValue","node","current","maxValue","delete","root","key","insert","inorder","console","log","search","toArray","result","push"],"mappings":"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","sourcesContent":["\nclass BST {\n\n    constructor(value) {\n        this.data = value;\n        this.left = this.right = null;\n    }\n\n    minValue(node) {\n        let current = node;\n        while (current && current.left != null){\n            current = current.left;\n        }\n        return current;\n    }\n\n    maxValue(node) {\n        let current = node;\n        while (current && current.right != null){\n            current = current.right;\n        }\n        return current;\n    }\n\n    delete(root, key) {\n        if (root == null) {\n            return root;\n        }\n\n        if (key < root.data) {\n            root.left = this.delete(root.left, key);\n        } else if (key > root.data) {\n            root.right = this.delete(root.right, key);\n        } else {\n            if (root.left === null) {\n                return root.right;\n            } else if (root.right == null) {\n                return root.left;\n            }\n            root.data = this.minValue(root.right);\n            root.right = this.delete(root.right, root.data);\n        }\n\n        return root;\n    }\n\n    insert(root, value) {\n        if (!root) {\n            return new BST(value);\n        }\n\n        if (value > root.data) {\n            root.right = this.insert(root.right, value);\n        } else {\n            root.left = this.insert(root.left, value);\n        }\n        return root;\n    }\n\n    inorder(root) {\n        if (!root) {\n            return;\n        }\n        this.inorder(root.left);\n        console.log(root.data);\n        this.inorder(root.right);\n    }\n\n    search(root, key) {\n        if (root==null || root.key==key)\n            return root;\n        if (root.data > key)\n            return this.search(root.left, key);\n        return this.search(root.right, key);\n    }\n\n    toArray(node) {\n        let result = [];\n        if (node.left != null) {\n            result.push(this.toArray(node.left));\n        }\n    \n        if (node.right != null) {\n            result.push(this.toArray(node.right));\n        }\n        result.push(node.data);\n        return result;\n    }\n\n}\n\nexport default BST;"]},"metadata":{},"sourceType":"module"}
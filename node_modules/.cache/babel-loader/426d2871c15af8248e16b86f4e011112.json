{"ast":null,"code":"import make_attribute from \"./make_attribute\";\nimport Product from \"./Product\";\n\nclass PriorityQueue {\n  constructor() {\n    this.heap = [];\n    this.length = this.size();\n  }\n\n  size() {\n    return this.heap.length;\n  }\n\n  make_heap(array) {\n    for (let i = 0; i < array.length; i++) {\n      this.insert(array[i]);\n    }\n  }\n\n  move_up() {\n    let child = this.heap[this.size() - 1];\n    let temp = this.size() - 1;\n\n    while (temp !== 0 && this.heap[this.parent(temp)][1] > child[1]) {\n      this.heap[temp] = this.heap[this.parent(temp)];\n      temp = this.parent(temp);\n    }\n\n    if (this.heap[temp][1] > child[1]) {\n      this.heap[temp] = child;\n    }\n  }\n\n  insert(data, priority = this.size() + 1) {\n    this.heap.push([data, priority]);\n    this.move_up();\n  }\n\n  parent(pos) {\n    if (pos % 2 === 1) {\n      return (pos - 1) / 2;\n    }\n\n    return (pos - 2) / 2;\n  }\n\n  search(object) {\n    let results = this.heap.filter(item => item[0].productName === object);\n    return results;\n  }\n\n  print() {\n    for (let i = 0; i < this.size(); i++) {\n      console.log(this.heap[i][0] + \" \" + this.heap[i][1]);\n    }\n  }\n\n  shallowEqual(object1, object2) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    for (let index = 0; index < keys1.length; index++) {\n      if (object1[keys1[index]] !== object2[keys2[index]]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  remove(object) {\n    for (let i = 0; i < this.size(); i++) {\n      if (this.shallowEqual(object, this.heap[i][0])) {\n        this.heap[i] = this.heap[this.size() - 1];\n        this.heap.pop();\n        console.log(this.heap);\n        this.heap.forEach(() => this.move_up());\n        console.log(this.heap);\n        return;\n      }\n    }\n  }\n\n}\n\nlet pQueue = new PriorityQueue();\n\nfunction insert_products() {\n  for (let i = 0; i <= 1000; i++) {\n    //Comment the next lines to prove with the objectlist\n    let product = make_attribute();\n    pQueue.insert(product); //Comment the next line to prove with make_attribute()\n  }\n} //Insertion time\n\n\nlet start = new Date();\nlet simulateTime = 1000;\ninsert_products();\nsetTimeout(function (argument) {\n  let end = new Date() - start;\n  console.info('Execution time (Insertion on Array List): %dms', end);\n}, simulateTime); //Search time\n\nlet start1 = new Date();\nlet simulateTime1 = 1000;\npQueue.search('Curry');\nsetTimeout(function (argument) {\n  let end = new Date() - start1;\n  console.info('Execution time (Search on Array List): %dms', end);\n}, simulateTime1); //Deletion time\n\nlet start2 = new Date();\nlet simulateTime2 = 1000;\n\nfor (let j = 0; j < 2500; j++) {\n  pQueue.remove();\n}\n\nsetTimeout(function (argument) {\n  let end = new Date() - start2;\n  console.info('Execution time (Delete on Array List): %dms', end);\n}, simulateTime2);\nexport default PriorityQueue;","map":{"version":3,"sources":["/home/sebastian/Downloads/Donburi-master/src/components/PriorityQueue.js"],"names":["make_attribute","Product","PriorityQueue","constructor","heap","length","size","make_heap","array","i","insert","move_up","child","temp","parent","data","priority","push","pos","search","object","results","filter","item","productName","print","console","log","shallowEqual","object1","object2","keys1","Object","keys","keys2","index","remove","pop","forEach","pQueue","insert_products","product","start","Date","simulateTime","setTimeout","argument","end","info","start1","simulateTime1","start2","simulateTime2","j"],"mappings":"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","sourcesContent":["import make_attribute from \"./make_attribute\";\nimport Product from \"./Product\";\n\n\nclass PriorityQueue {\n    constructor() {\n        this.heap = [];\n        this.length = this.size();\n    }\n    size() {\n        return this.heap.length;\n    }\n    make_heap(array) {\n        for (let i=0; i<array.length; i++) {\n            this.insert(array[i]);\n        }\n    }\n    move_up() {\n        let child = this.heap[this.size()-1];\n        let temp = this.size()-1;\n        while (temp !== 0 && this.heap[this.parent(temp)][1] > child[1]) {\n            this.heap[temp] = this.heap[this.parent(temp)];\n            temp = this.parent(temp);\n        }\n        if (this.heap[temp][1] > child[1]){\n            this.heap[temp] = child;\n        }\n    }\n    insert(data, priority=this.size()+1) {\n        this.heap.push([data, priority]);\n        this.move_up();\n    }\n    parent(pos) {\n        if (pos % 2 === 1) {\n            return (pos-1)/2\n        }\n        return (pos-2)/2\n    }\n\n    search(object){\n        let results = this.heap.filter(item => item[0].productName === object);\n        return results;\n    }\n    print() {\n        for (let i=0; i<this.size(); i++) {\n            console.log(this.heap[i][0] + \" \" + this.heap[i][1]);\n        }\n    }\n    shallowEqual(object1, object2) {\n        const keys1 = Object.keys(object1)\n        const keys2 = Object.keys(object2);\n        for (let index = 0; index < keys1.length; index++) {\n            if (object1[keys1[index]] !== object2[keys2[index]]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    remove(object) {\n        for (let i=0; i<this.size(); i++) {\n            if (this.shallowEqual(object, this.heap[i][0])) {\n                this.heap[i] = this.heap[this.size()-1];\n                this.heap.pop();\n                console.log(this.heap);\n                this.heap.forEach( () => this.move_up() );\n                console.log(this.heap);\n                return;\n            }\n        }\n    }\n}\n\nlet pQueue = new PriorityQueue();\n\nfunction insert_products(){\n    for (let i=0; i<=1000; i++){\n        //Comment the next lines to prove with the objectlist\n        let product = make_attribute();\n        pQueue.insert(product);\n        //Comment the next line to prove with make_attribute()\n    }\n}\n\n//Insertion time\nlet start = new Date()\nlet simulateTime = 1000\n\ninsert_products();\n\nsetTimeout(function(argument) {\n    let end = new Date() - start\n    console.info('Execution time (Insertion on Array List): %dms', end)\n}, simulateTime)\n\n//Search time\nlet start1 = new Date()\nlet simulateTime1 = 1000\n\n\npQueue.search('Curry');\n\nsetTimeout(function(argument) {\n    let end = new Date() - start1\n    console.info('Execution time (Search on Array List): %dms', end)\n}, simulateTime1)\n\n\n\n//Deletion time\nlet start2 = new Date()\nlet simulateTime2 = 1000\n\nfor (let j=0; j<2500; j++){\n    pQueue.remove();\n}\n\nsetTimeout(function(argument) {\n    let end = new Date() - start2\n    console.info('Execution time (Delete on Array List): %dms', end)\n}, simulateTime2)\n\nexport default PriorityQueue;\n"]},"metadata":{},"sourceType":"module"}